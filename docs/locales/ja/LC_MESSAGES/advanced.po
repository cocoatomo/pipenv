# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 8.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-26 10:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo <cocoatomo77@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../advanced.rst:4
msgid "Advanced Usage of Pipenv"
msgstr "pipenvの進んだ使い方"

#: ../../advanced.rst:8
msgid ""
"This document covers some of Pipenv's more glorious and advanced features."
msgstr "このドキュメントではpipenvのより輝かしい進んだ機能を対象としています。"

#: ../../advanced.rst:11
msgid "☤ Example Pipfile & Pipfile.lock"
msgstr "☤ PipfileとPipfile.lockの例"

#: ../../advanced.rst:15
msgid ""
"Here is a simple example of a ``Pipfile`` and the resulting "
"``Pipfile.lock``."
msgstr "``Pipfile`` とそこから生成された ``Pipfile.lock`` の簡単な例を示します。"

#: ../../advanced.rst:18
msgid "Example Pipfile"
msgstr "Pipfileの例"

#: ../../advanced.rst:36
msgid "Example Pipfile.lock"
msgstr "Pipfile.lockの例"

#: ../../advanced.rst:126
msgid "☤ Importing from requirements.txt"
msgstr "☤ requirements.txtからのインポート"

#: ../../advanced.rst:128
msgid ""
"If you only have a ``requirements.txt`` file available when running ``pipenv"
" install``, pipenv will automatically import the contents of this file and "
"create a ``Pipfile`` for you."
msgstr ""
"``pipenv install`` を実行したときに ``requirements.txt`` "
"ファイルしか無い場合は、pipenvは自動でそのファイルの内容をインポートし ``Pipfile`` を作成します。"

#: ../../advanced.rst:131
msgid ""
"You can also specify ``$ pipenv install -r path/to/requirements.txt`` to "
"import a requirements file."
msgstr ""
"requirements ファイルをインポートするのに、 ``$ pipenv install -r "
"path/to/requirements.txt`` と指定することもできます。"

#: ../../advanced.rst:133
msgid ""
"Note, that when importing a requirements file, they often have version "
"numbers pinned, which you likely won't want in your ``Pipfile``, so you'll "
"have to manually update your ``Pipfile`` afterwards to reflect this."
msgstr ""
"1つ注意ですが、requirementsファイルをインポートするときに、バージョン番号が固定されているけれど、それを ``Pipfile`` に含めたくないことがよくあります。\n"
"そのため、requirementsファイルの内容を反映した後に ``Pipfile`` を手作業で修正する必要があります。"

#: ../../advanced.rst:140
msgid "☤ Specifying Versions of a Package"
msgstr "☤ パッケージのバージョンを指定する"

#: ../../advanced.rst:142
msgid ""
"To tell pipenv to install a specific version of a library, the usage is "
"simple::"
msgstr "ライブラリの特定のバージョンをインストールするようにpipenvに教える方法はとても簡潔です::"

#: ../../advanced.rst:146
msgid ""
"This will update your ``Pipfile`` to reflect this requirement, "
"automatically."
msgstr "このコマンドを実行することで、バージョン指定を反映するように ``Pipfile`` が自動で更新されます。"

#: ../../advanced.rst:150
msgid "☤ Specifying Versions of Python"
msgstr "☤ Pythonのバージョンを指定する"

#: ../../advanced.rst:152
msgid ""
"To create a new virtualenv, using a specific version of Python you have "
"installed (and on your ``PATH``), use the ``--python VERSION`` flag, like "
"so:"
msgstr ""
"インストール済みの (そして ``PATH`` 上にある) 特定のバージョンのPythonを使って、新しく仮想環境を作るには、 ``--python "
"VERSION`` フラグを次のように使います:"

#: ../../advanced.rst:155
msgid "Use Python 3::"
msgstr "Python 3を使うには::"

#: ../../advanced.rst:159
msgid "Use Python3.6::"
msgstr "Python 3.6を使うには::"

#: ../../advanced.rst:163
msgid "Use Python 2.7.14::"
msgstr "Python 2.7.14を使うには::"

#: ../../advanced.rst:167
msgid ""
"When given a Python version, like this, Pipenv will automatically scan your "
"system for a Python that matches that given version."
msgstr "このようにPythonのバージョンが与えられたときは、pipenvはそのバージョンに合うPythonをシステムから自動で探しに行きます。"

#: ../../advanced.rst:169
msgid ""
"If a ``Pipfile`` hasn't been created yet, one will be created for you, that "
"looks like this::"
msgstr "``Pipfile`` がまだ作成されていなかった場合は、次のような内容で作成されます::"

#: ../../advanced.rst:182
msgid ""
"Note the inclusion of ``[requires] python_version = \"3.6\"``. This "
"specifies that your application requires this version of Python, and will be"
" used automatically when running ``pipenv install`` against this ``Pipfile``"
" in the future (e.g. on other machines). If this is not true, feel free to "
"simply remove this section."
msgstr ""
"``[requires] python_version = \"3.6\"`` という文言が含まれていることに注目してください。\n"
"これは、アプリケーションがこのバージョンのPythonを要求していることを示し、将来 (例えば他のマシンで) この ``Pipfile`` に対して ``pipenv install`` を実行するときに自動で使われます。\n"
"この指定が間違っている場合は、気にせずこのセクションを削除してください。"

#: ../../advanced.rst:186
msgid ""
"If you don't specify a Python version on the command–line, either the "
"``[requires]`` ``python_full_version`` or ``python_version`` will be "
"selected automatically, falling back to whatever your system's default "
"``python`` installation is, at time of execution."
msgstr ""
"コマンドラインでも ``[requires]`` でもPythonのバージョンを指定しなかった場合は、 ``python_full_version`` "
"や ``python_version`` は自動で選ばれ、システムのデフォルトとしてインストールされている ``python`` が実行時に選ばれます。"

#: ../../advanced.rst:190
msgid "☤ Specifying Package Indexes"
msgstr "☤ パッケージの一覧を指定する"

#: ../../advanced.rst:192
msgid ""
"If you'd like a specific package to be installed with a specific package "
"index, you can do the following::"
msgstr "特定のパッケージ一覧で特定のパッケージをインストールしたい場合は、次のように指定できます::"

#: ../../advanced.rst:211 ../../advanced.rst:293
msgid "Very fancy."
msgstr "めっちゃ高機能。"

#: ../../advanced.rst:214
msgid "☤ Specifying Basically Anything"
msgstr "☤ 基本的な事項の指定"

#: ../../advanced.rst:216
msgid ""
"If you'd like to specify that a specific package only be installed on "
"certain systems, you can use `PEP 508 specifiers "
"<https://www.python.org/dev/peps/pep-0508/>`_ to accomplish this."
msgstr ""
"ある特定のパッケージをあるシステムだけにインストールしたい場合は、 `PEP 508 指示子 "
"<https://www.python.org/dev/peps/pep-0508/>`_ を使って実現できます。"

#: ../../advanced.rst:219
msgid ""
"Here's an example ``Pipfile``, which will only install ``pywinusb`` on "
"Windows systems::"
msgstr "これが、 Windowsシステムだけに ``pywinusb`` をインストールする ``Pipfile`` の例です::"

#: ../../advanced.rst:230
msgid "Voilà!"
msgstr "ほら、見て!"

#: ../../advanced.rst:232
msgid "Here's a more complex example::"
msgstr "これがもっと複雑な例です::"

#: ../../advanced.rst:241
msgid "Magic. Pure, unalderated magic."
msgstr ""

#: ../../advanced.rst:246
msgid "☤ Editable Dependencies (e.g. ``-e .`` )"
msgstr "☤ 編集可能な依存関係 (例えば ``-e .`` )"

#: ../../advanced.rst:248
msgid ""
"You can tell Pipenv to install a path as editable — often this is useful for"
" the current working directory when working on packages::"
msgstr ""
"pipenvに編集可能なパスとしてインストールするよう指示できます — "
"この機能は、パッケージの開発作業をしているときに、現在の作業ディレクトリを指すのに便利なことが多いです::"

#: ../../advanced.rst:257
msgid ""
"Note that all sub-dependencies will get added to the ``Pipfile.lock`` as "
"well."
msgstr "全ての依存関係が ``Pipfile.lock`` にも追加されることに注意してください。"

#: ../../advanced.rst:261
msgid "☤ Managing System Dependencies"
msgstr "☤ システム環境の依存関係管理"

#: ../../advanced.rst:263
msgid ""
"You can tell Pipenv to install things into it's parent system with the "
"``--system`` flag::"
msgstr "``--system`` フラグを使って、pipenvに親システムにイストールするよう指示できます::"

#: ../../advanced.rst:267
msgid ""
"This is useful for Docker containers, and deployment infrastructure (e.g. "
"Heroku does this)."
msgstr ""

#: ../../advanced.rst:271
msgid "☤ Generating a ``requirements.txt``"
msgstr "☤ ``requirements.txt`` の生成"

#: ../../advanced.rst:273
msgid ""
"You can convert a ``Pipfile`` and ``Pipenv.lock`` into a "
"``requirements.txt`` file very easily, and get all the benefits of hashes, "
"extras, and other goodies we have included."
msgstr ""
"``Pipfile`` や ``Pipenv.lock`` は ``requirements.txt`` "
"に非常に簡単に変換でき、ハッシュ、追加機能、素敵な機能など既に実装された機能全ての恩恵を受けられます。"

#: ../../advanced.rst:275
msgid "Let's take this ``Pipfile``::"
msgstr "この ``Pipfile`` から::"

#: ../../advanced.rst:284
msgid "And generate a ``requirements.txt`` out of it::"
msgstr "``requirements.txt`` を生成しましょう::"

#: ../../advanced.rst:296
msgid "☤ Detection of Security Vulnerabilities"
msgstr "☤ セキュリティの脆弱性の検知"

#: ../../advanced.rst:298
msgid ""
"Pipenv includes the `safety <https://github.com/pyupio/safety>`_ package, "
"and will use it to scan your dependency graph for known security "
"vulnerabilities!"
msgstr ""
"pipenv は `safety <https://github.com/pyupio/safety>`_ "
"パッケージを含んでいて、既知のセキュリティの脆弱性が無いか依存関係グラフを走査するのに使われます。"

#: ../../advanced.rst:301
msgid "Example::"
msgstr "例::"

#: ../../advanced.rst:342 ../../advanced.rst:689
msgid "✨🍰✨"
msgstr "✨🍰✨"

#: ../../advanced.rst:345
msgid "☤ Automatic Python Installation"
msgstr "☤ Pythonの自動インストール"

#: ../../advanced.rst:347
msgid ""
"If you have `pyenv <https://github.com/pyenv/pyenv#simple-python-version-"
"management-pyenv>`_ installed and configured, Pipenv will automatically ask "
"you if you want to install a required version of Python if you don't already"
" have it available."
msgstr ""
"`pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-"
"pyenv>`_ "
"のインストールと設定が済んでいて、必要とするバージョンのPythonがまだ利用できる状態になっていない場合、pipenvは自動でそのバージョンのPythonをインストールしたいかどうかを尋ねます。"

#: ../../advanced.rst:349
msgid "This is a very fancy feature, and we're very proud of it::"
msgstr "これは非常に高度な機能で、自慢の機能です::"

#: ../../advanced.rst:380
msgid ""
"Pipenv automatically honors both the ``python_full_version`` and "
"``python_version`` `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ "
"specifiers."
msgstr ""
"pipenv は `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ が規定する "
"``python_full_version`` と ``python_version`` のどちらも考慮します。"

#: ../../advanced.rst:382
msgid "💫✨🍰✨💫"
msgstr "💫✨🍰✨💫"

#: ../../advanced.rst:385
msgid "☤ Automatic Loading of ``.env``"
msgstr "☤ ``.env`` の自動読み込み"

#: ../../advanced.rst:387
msgid ""
"If a ``.env`` file is present in your project, ``$ pipenv shell`` and ``$ "
"pipenv run`` will automatically load it, for you::"
msgstr ""
"プロジェクトに ``.env`` ファイルが存在する場合は、 ``$ pipenv shell`` および ``$ pipenv run`` "
"は自動で読み込みます::"

#: ../../advanced.rst:401
msgid ""
"This is very useful for keeping production credentials out of your codebase."
" We do not recommend comitting ``.env`` files into source control!"
msgstr ""
"この機能は、本番環境の証明書をコードベースから避けておくのに非常に便利です。\n"
"``.env`` ファイルをソースコード管理にコミットするのはお薦めしません!"

#: ../../advanced.rst:407
msgid "☤ Fancy Installation of Pipenv"
msgstr "☤ pipenvの高機能なインストール方法"

#: ../../advanced.rst:409
msgid ""
"To install pipenv in a fancy way, we recommend using `pipsi "
"<https://github.com/mitsuhiko/pipsi>`_."
msgstr ""
"高機能な方法でpipenvをインストールするには、 `pipsi <https://github.com/mitsuhiko/pipsi>`_ "
"をオススメします。"

#: ../../advanced.rst:411
msgid ""
"Pipsi is a powerful tool which allows you to install Python scripts into "
"isolated virtual environments."
msgstr "pipsiは、Pythonスクリプトを隔離された仮想環境にインストールできるようにする強力なツールです。"

#: ../../advanced.rst:413
msgid "To install pipsi, first run this::"
msgstr "pipsiをインストールするには、まずこれを実行します::"

#: ../../advanced.rst:417
msgid "Follow the instructions, you'll have to update your ``PATH``."
msgstr "指示に従って ``PATH`` を更新する必要があります。"

#: ../../advanced.rst:419
msgid "Then, simply run::"
msgstr "そして、次のコマンドを実行します::"

#: ../../advanced.rst:424 ../../advanced.rst:447
msgid "To upgrade pipenv at any time::"
msgstr "いつでもpipenvをアップグレードするには次のコマンドを実行します::"

#: ../../advanced.rst:429
msgid ""
"This will install both ``pipenv`` and ``pew`` (one of our dependencies) in "
"an isolated virtualenv, so it doesn't interfere with the rest of your Python"
" installation!"
msgstr ""
"これは ``pipenv`` と (依存ライブラリの1つである) ``pew`` "
"を隔離された仮想環境にインストールするので、他のインストールされているPython環境に干渉することはありません。"

#: ../../advanced.rst:435
msgid "☤ Pragmatic Installation of Pipenv"
msgstr "☤ pipenvの実用的なインストール方法"

#: ../../advanced.rst:437
msgid ""
"If you have a working installation of pip, and maintain certain "
"\"toolchain\" type Python modules as global utilities in your user "
"enviornment, pip `user installs <https://pip.pypa.io/en/stable/user_guide"
"/#user-installs>`_ allow for installation into your home directory. Note "
"that due to interaction between dependencies, you should limit tools "
"installed in this way to basic building blocks for a Python workflow like "
"virtualenv, pipenv, tox, and similar software."
msgstr ""
"もしインストールされた今も使っているpipがあって、ある \"ツール群\" タイプのPythonモジュールをどの環境でも使うユーティリティとしてメンテナンスしている場合は、pip の `ユーザーインストール <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を使うとホームディレクトリにインストールできます。\n"
"依存関係どうしの影響の関係で、この方法でインストールするツールは、virtualenv、pipenv、toxのようなPythonを使う作業の工程のための基本要素となるソフトウェアだけに制限すべきという点に注意してください。"

#: ../../advanced.rst:439
msgid "To install::"
msgstr "次のコマンドでインストールします:"

#: ../../advanced.rst:443
msgid ""
"For more information see the `user installs documentation "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_, but to add the "
"installed cli tools from a pip user install to your path, add the output "
"of::"
msgstr ""
"さらに詳しいことは `ユーザーインストールの説明 <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を参照してください。\n"
"pipのユーザーインストールでインストールしたCLIツールをパスに追加するには、次のコマンドで出力されるディレクトリを追加してください::"

#: ../../advanced.rst:454
msgid "☤ Crude Installation of Pipenv"
msgstr "☤ 大雑把なpipenvのインストール方法"

#: ../../advanced.rst:456
msgid ""
"If you don't even have pip installed, you can use this crude installation "
"method, which will boostrap your whole system::"
msgstr "もしpipをまだインストールしていなくても、この大雑把なインストール方法を使って、pipenvのシステム全体を立ち上げられます::"

#: ../../advanced.rst:460
msgid "Congratulations, you now have pip and Pipenv installed!"
msgstr "おめでとう、これでpipとPipenvがインストールされました!"

#: ../../advanced.rst:465
msgid "☤ Environment Management with Pipenv"
msgstr "☤ pipenvによる環境管理"

#: ../../advanced.rst:467
msgid ""
"The three primary commands you'll use in managing your pipenv environment "
"are ``$ pipenv install``, ``$ pipenv uninstall``, and ``$ pipenv lock``."
msgstr ""
"pipenvの環境管理で使うであろう主要な3つのコマンドは ``$ pipenv install`` 、 ``$ pipenv uninstall`` "
"、 ``$ pipenv lock`` です。"

#: ../../advanced.rst:473
msgid "$ pipenv install"
msgstr "$ pipenv install"

#: ../../advanced.rst:475
msgid ""
"``$ pipenv install`` is used for installing packages into the pipenv virtual"
" environment and updating your Pipfile."
msgstr ""
"``$ pipenv install`` は、pipenvの仮想環境にパッケージをインストールしたり、Pipfileを更新したりするのに使います。"

#: ../../advanced.rst:478
msgid "Along with the basic install command, which takes the form::"
msgstr "次の形式の基本的なインストールコマンドと一緒に::"

#: ../../advanced.rst:482
msgid "The user can provide these additional parameters:"
msgstr "ユーザーは以下の追加のパラメータを渡せます:"

#: ../../advanced.rst:484
msgid ""
"``--two`` — Performs the installation in a virtualenv using the system "
"``python2`` link."
msgstr "``--two`` — システムのシンボリックリンク ``python2`` を使い、仮想環境へのインストールを行います。"

#: ../../advanced.rst:485
msgid ""
"``--three`` — Performs the installation in a virtualenv using the system "
"``python3`` link."
msgstr "``--three`` — システムのシンボリックリンク ``python3`` を使い、仮想環境へのインストールを行います。"

#: ../../advanced.rst:486
msgid ""
"``--python`` — Performs the installation in a virtualenv using the provided "
"Python intepreter."
msgstr "``--python`` — 引数で与えられたPythonインタプリタを使い、仮想環境へのインストールを行います。"

#: ../../advanced.rst:488
msgid ""
"None of the above commands should be used together. They are also "
"**destructive** and will delete your current virtualenv before replacing it "
"with an appropriately versioned one."
msgstr ""
"上のコマンドは一緒に使ってはいけません。\n"
"これらのコマンドは *破壊的* であり、現在の仮想環境を削除してから、適切なバージョンが使われた仮想環境に置き換えられます。"

#: ../../advanced.rst:492
msgid ""
"The virtualenv created by Pipenv may be different from what you were "
"expecting. Dangerous characters (i.e. ``$`!*@\"`` as well as space, line "
"feed, carriage return, and tab) are converted to underscores. Additionally, "
"the full path to the current folder is encoded into a \"slug value\" and "
"appended to ensure the virtualenv name is unique."
msgstr ""
"pipenvで作成された仮想環境は、予想したものと異なっているかもしれません。\n"
"危険な文字 (つまり、空白、ラインフィード、キャリッジリターン、タブだけでなく ``$`!*@\"`` も) はアンダースコアに変換されます。\n"
"さらに、現在のフォルダのフルパスは \"スラッグ値\" にエンコードされ、仮想環境名が一意になるように末尾に追加されます。"

#: ../../advanced.rst:498
msgid ""
"``--dev`` — Install both ``develop`` and ``default`` packages from "
"``Pipfile.lock``."
msgstr ""
"``--dev`` — ``Pipfile.lock`` の ``develop`` パッケージと ``default`` "
"パッケージの両方をインストールします。"

#: ../../advanced.rst:499
msgid ""
"``--system`` — Use the system ``pip`` command rather than the one from your "
"virtualenv."
msgstr "``--system`` — 仮想環境ではなく、システムの ``pip`` コマンドを使用します。"

#: ../../advanced.rst:500
msgid ""
"``--ignore-pipfile`` — Ignore the ``Pipfile`` and install from the "
"``Pipfile.lock``."
msgstr ""
"``--ignore-pipfile`` — ``Pipfile`` を無視し、 ``Pipfile.lock`` を使ってインストールします。"

#: ../../advanced.rst:501
msgid ""
"``--skip-lock`` — Ignore the ``Pipfile.lock`` and install from the "
"``Pipfile``. In addition, do not write out a ``Pipfile.lock`` reflecting "
"changes to the ``Pipfile``."
msgstr ""
"``--skip-lock`` — ``Pipfile.lock`` を無視し、 ``Pipfile`` を使ってインストールします。\n"
"加えて、 ``Pipfile`` へ加えた変更を、 ``Pipfile.lock`` へは反映しません。"

#: ../../advanced.rst:506
msgid "$ pipenv uninstall"
msgstr "$ pipenv uninstall"

#: ../../advanced.rst:508
msgid ""
"``$ pipenv uninstall`` supports all of the parameters in `pipenv install "
"<#pipenv-install>`_, as well as one additonal, ``--all``."
msgstr ""
"``$ pipenv uninstall`` は `pipenv install <#pipenv-install>`_ の全てのパラメータに加えて、 "
"``--all`` もサポートしています。"

#: ../../advanced.rst:511
msgid ""
"``--all`` — This parameter will purge all files from the virtual "
"environment, but leave the Pipfile untouched."
msgstr "``--all`` — このパラメータを付けると、仮想環境から全てのファイルを除去しますが、Pipfileだけは触らずに残します。"

#: ../../advanced.rst:518
msgid "$ pipenv lock"
msgstr "$ pipenv lock"

#: ../../advanced.rst:520
msgid ""
"``$ pipenv lock`` is used to create a ``Pipfile.lock``, which declares "
"**all** dependencies (and sub-dependencies) of your project, their latest "
"available versions, and the current hashes for the downloaded files. This "
"ensures repeatable, and most importantly *deterministic*, builds."
msgstr ""
"``$ pipenv lock`` は ``Pipfile.lock`` を作成するために使用します。\n"
"このファイルにはプロジェクトの *全ての* 依存パッケージ (とさらにその依存パッケージ) と、それらの利用可能な最新のバージョン、ダウンロード済みのファイルの現在のハッシュが宣言されています。\n"
"このファイルのおかげで、繰り返し可能かつ、最も重要な機能である *決定論的な* ビルドが保証されています。"

#: ../../advanced.rst:523
msgid "☤ About Shell Configuration"
msgstr "☤ シェルの設定について"

#: ../../advanced.rst:525
msgid ""
"Shells are typically misconfigured for subshell use, so ``$ pipenv shell "
"--fancy`` may produce unexpected results. If this is the case, try ``$ "
"pipenv shell``, which uses \"compatibility mode\", and will attempt to spawn"
" a subshell despite misconfiguration."
msgstr ""

#: ../../advanced.rst:527
msgid ""
"A proper shell configuration only sets environment variables like ``PATH`` "
"during a login session, not during every subshell spawn (as they are "
"typically configured to do). In fish, this looks like this::"
msgstr ""

#: ../../advanced.rst:533
msgid ""
"You should do this for your shell too, in your ``~/.profile`` or "
"``~/.bashrc`` or wherever appropriate."
msgstr "各自のシェルに対して、 ``~/.profile`` や ``~/.bashrc`` などの適切なファイルで同様の設定をしてください。"

#: ../../advanced.rst:537
msgid "☤ Configuration With Environment Variables"
msgstr "☤ 環境変数による設定"

#: ../../advanced.rst:539
msgid ""
"``pipenv`` comes with a handful of options that can be enabled via shell "
"environment variables. To activate them, simply create the variable in your "
"shell and pipenv will detect it."
msgstr ""
"``pipenv`` には、シェル環境変数で有効にできるオプションが少しだけあります。\n"
"オプションを有効にするには、シェルでその変数を作成すればpipevnが見付けてくれます。"

#: ../../advanced.rst:543
msgid ""
"``PIPENV_DEFAULT_PYTHON_VERSION`` — Use this version of Python when creating"
" new virtual environments, by default (e.g. ``3.6``)."
msgstr ""

#: ../../advanced.rst:545
msgid ""
"``PIPENV_SHELL_FANCY`` — Always use fancy mode when invoking ``pipenv "
"shell``."
msgstr ""

#: ../../advanced.rst:547
msgid ""
"``PIPENV_VENV_IN_PROJECT`` — If set, use ``.venv`` in your project directory"
" instead of the global virtualenv manager ``pew``."
msgstr ""
"``PIPENV_VENV_IN_PROJECT`` — 設定すると、システムグローバルな仮想環境マネージャーの ``pew`` "
"ではなく、プロジェクトディレクトリの ``.venv`` を使います。"

#: ../../advanced.rst:550
msgid "``PIPENV_COLORBLIND`` — Disable terminal colors, for some reason."
msgstr "``PIPENV_COLORBLIND`` — 何らかの理由があるときのために、ターミナルの色付けをしません。"

#: ../../advanced.rst:552
msgid ""
"``PIPENV_NOSPIN`` — Disable terminal spinner, for cleaner logs. "
"Automatically set in CI environments."
msgstr ""

#: ../../advanced.rst:554
msgid ""
"``PIPENV_MAX_DEPTH`` — Set to an integer for the maximum number of "
"directories to resursively search for a Pipfile."
msgstr ""

#: ../../advanced.rst:557
msgid ""
"``PIPENV_TIMEOUT`` — Set to an integer for the max number of seconds Pipenv "
"will wait for virtualenv creation to complete.  Defaults to 120 seconds."
msgstr ""

#: ../../advanced.rst:560
msgid ""
"``PIPENV_IGNORE_VIRTUALENVS`` — Set to disable automatically using an "
"activated virtualenv over the current project's own virtual environment."
msgstr ""

#: ../../advanced.rst:564
msgid ""
"Also note that `pip itself supports environment variables "
"<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_, if you "
"need additional customization."
msgstr ""

#: ../../advanced.rst:568
msgid "☤ A Note about VCS Dependencies"
msgstr ""

#: ../../advanced.rst:570
msgid ""
"Pipenv will resolve the sub–depencies of VCS dependencies, but only if they "
"are editable, like so::"
msgstr ""

#: ../../advanced.rst:575
msgid "If editable is not true, sub–dependencies will not get resolved."
msgstr ""

#: ../../advanced.rst:578
msgid "☤ Custom Virtual Environment Location"
msgstr ""

#: ../../advanced.rst:580
msgid ""
"Pipenv's underlying ``pew`` dependency will automatically honor the "
"``WORKON_HOME`` environment variable, if you have it set — so you can tell "
"pipenv to store your virtual environments wherever you want, e.g.::"
msgstr ""

#: ../../advanced.rst:585
msgid ""
"In addition, you can also have Pipenv stick the virtualenv in "
"``project/.venv`` by setting the ``PIPENV_VENV_IN_PROJECT`` environment "
"variable."
msgstr ""

#: ../../advanced.rst:589
msgid "☤ Testing Projects"
msgstr ""

#: ../../advanced.rst:591
msgid ""
"Pipenv is being used in projects like `Requests`_ for declaring development "
"dependencies and running the test suite."
msgstr ""

#: ../../advanced.rst:593
msgid ""
"We've currently tested deployments with both `Travis-CI`_ and `tox`_ with "
"success."
msgstr ""

#: ../../advanced.rst:596
msgid "Travis CI"
msgstr ""

#: ../../advanced.rst:598
msgid ""
"An example Travis CI setup can be found in `Requests`_. The project uses a "
"Makefile to define common functions such as its ``init`` and ``tests`` "
"commands. Here is a stripped down example ``.travis.yml``::"
msgstr ""

#: ../../advanced.rst:619
msgid "and the corresponding Makefile::"
msgstr ""

#: ../../advanced.rst:630
msgid "Tox Automation Project"
msgstr ""

#: ../../advanced.rst:632
msgid ""
"Alternatively, you can configure a ``tox.ini`` like the one below for both "
"local and external testing::"
msgstr ""

#: ../../advanced.rst:654
msgid ""
"With Pipenv's default configuration, you'll need to use tox's ``passenv`` "
"parameter to pass your shell's ``HOME`` variable."
msgstr ""

#: ../../advanced.rst:662
msgid "☤ Pipfile.lock Security Features"
msgstr ""

#: ../../advanced.rst:664
msgid ""
"``Pipfile.lock`` takes advantage of some great new security improvements in "
"``pip``. By default, the ``Pipfile.lock`` will be generated with the sha256 "
"hashes of each downloaded package. This will allow ``pip`` to guarantee "
"you're installing what you intend to when on a compromised network, or "
"downloading dependencies from an untrusted PyPI endpoint."
msgstr ""

#: ../../advanced.rst:669
msgid ""
"We highly recommend approaching deployments with promoting projects from a "
"development environment into production. You can use ``pipenv lock`` to "
"compile your dependencies on your development environment and deploy the "
"compiled ``Pipfile.lock`` to all of your production environments for "
"reproducible builds."
msgstr ""

#: ../../advanced.rst:681
msgid "☤ Shell Completion"
msgstr ""

#: ../../advanced.rst:683
msgid "To enable completion in fish, add this to your config::"
msgstr ""

#: ../../advanced.rst:687
msgid "Magic shell completions are now enabled!"
msgstr ""
