# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 11.0.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-06 15:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../advanced.rst:4
msgid "Advanced Usage of Pipenv"
msgstr "Pipenvの進んだ使い方"

#: ../../advanced.rst:8
msgid ""
"This document covers some of Pipenv's more glorious and advanced features."
msgstr "このドキュメントではPipenvのより輝かしい進んだ機能を対象としています。"

#: ../../advanced.rst:11
msgid "☤ Specifying Package Indexes"
msgstr "☤ パッケージの一覧を指定する"

#: ../../advanced.rst:13
msgid ""
"If you'd like a specific package to be installed with a specific package "
"index, you can do the following::"
msgstr "特定のパッケージ一覧で特定のパッケージをインストールしたい場合は、次のように指定できます::"

#: ../../advanced.rst:32 ../../advanced.rst:126
msgid "Very fancy."
msgstr "めっちゃ高機能。"

#: ../../advanced.rst:35
msgid "☤ Specifying Basically Anything"
msgstr "☤ 基本的な事項の指定"

#: ../../advanced.rst:37
msgid ""
"If you'd like to specify that a specific package only be installed on "
"certain systems, you can use `PEP 508 specifiers "
"<https://www.python.org/dev/peps/pep-0508/>`_ to accomplish this."
msgstr ""
"ある特定のパッケージをあるシステムだけにインストールしたい場合は、 `PEP 508 指示子 "
"<https://www.python.org/dev/peps/pep-0508/>`_ を使って実現できます。"

#: ../../advanced.rst:40
msgid ""
"Here's an example ``Pipfile``, which will only install ``pywinusb`` on "
"Windows systems::"
msgstr "これが、 Windowsシステムだけに ``pywinusb`` をインストールする ``Pipfile`` の例です::"

#: ../../advanced.rst:51
msgid "Voilà!"
msgstr "ほら、見て!"

#: ../../advanced.rst:53
msgid "Here's a more complex example::"
msgstr "これがもっと複雑な例です::"

#: ../../advanced.rst:62
msgid "Magic. Pure, unadulterated magic."
msgstr "魔法です。純粋な、混じり気の無い魔法です。"

#: ../../advanced.rst:66
msgid "☤ Deploying System Dependencies"
msgstr "☤ システム環境への依存関係のデプロイ"

#: ../../advanced.rst:68
msgid ""
"You can tell Pipenv to install a Pipfile's contents into its parent system "
"with the ``--system`` flag::"
msgstr "``--system`` フラグを使って、Pipfileの内容にあるものを親システムにイストールするようPipenvに指示できます::"

#: ../../advanced.rst:72
msgid ""
"This is useful for Docker containers, and deployment infrastructure (e.g. "
"Heroku does this)."
msgstr ""

#: ../../advanced.rst:74
msgid "Also useful for deployment is the ``--deploy`` flag::"
msgstr "それと ``--deploy`` フラグもデプロイで役に立ちます::"

#: ../../advanced.rst:78
msgid ""
"This will fail a build if the ``Pipfile.lock`` is out–of–date, instead of "
"generating a new one."
msgstr ""
"このフラグを立てると、 ``Pipfile.lock`` が古くなっている場合に、 ``Pipfile.lock`` "
"を新しく生成するのではなくビルドが失敗します。"

#: ../../advanced.rst:82
msgid "☤ ``pipenv`` and ``conda``"
msgstr "☤ ``pipenv`` と ``conda``"

#: ../../advanced.rst:84
msgid ""
"To use Pipenv with a Conda–provided Python, you simply provide the path to "
"the Python binary::"
msgstr "Condaが提供するPythonでPipenvを使うには、Pythonバイナリへのパスを与えるだけでよいです::"

#: ../../advanced.rst:89
msgid "☤ Generating a ``requirements.txt``"
msgstr "☤ ``requirements.txt`` の生成"

#: ../../advanced.rst:91
msgid ""
"You can convert a ``Pipfile`` and ``Pipfile.lock`` into a "
"``requirements.txt`` file very easily, and get all the benefits of hashes, "
"extras, and other goodies we have included."
msgstr ""
"``Pipfile`` や ``Pipfile.lock`` は ``requirements.txt`` "
"に非常に簡単に変換でき、ハッシュ、追加機能、素敵な機能など既に実装された機能全ての恩恵を受けられます。"

#: ../../advanced.rst:93
msgid "Let's take this ``Pipfile``::"
msgstr "この ``Pipfile`` から::"

#: ../../advanced.rst:102 ../../advanced.rst:120
msgid "And generate a ``requirements.txt`` out of it::"
msgstr "``requirements.txt`` を生成しましょう::"

#: ../../advanced.rst:111
msgid ""
"If you wish to generate a ``requirements.txt`` with only the development "
"requirements you can do that too!  Let's take the following ``Pipfile``::"
msgstr ""
"開発用の依存関係だけの ``requirements.txt`` を生成したいと思った場合は、それも可能です!\n"
"次の ``Pipfile`` を用意しましょう::"

#: ../../advanced.rst:129
msgid "☤ Detection of Security Vulnerabilities"
msgstr "☤ セキュリティの脆弱性の検知"

#: ../../advanced.rst:131
msgid ""
"Pipenv includes the `safety <https://github.com/pyupio/safety>`_ package, "
"and will use it to scan your dependency graph for known security "
"vulnerabilities!"
msgstr ""
"Pipenv は `safety <https://github.com/pyupio/safety>`_ "
"パッケージを含んでいて、既知のセキュリティの脆弱性が無いか依存関係グラフを走査するのに使われます。"

#: ../../advanced.rst:134
msgid "Example::"
msgstr "例::"

#: ../../advanced.rst:175 ../../advanced.rst:403
msgid "✨🍰✨"
msgstr "✨🍰✨"

#: ../../advanced.rst:179
msgid "☤ Open a Module in Your Editor"
msgstr "☤ エディタでモジュールを開く"

#: ../../advanced.rst:181
msgid ""
"Pipenv allows you to open any Python module that is installed (including "
"ones in your codebase), with the ``$ pipenv open`` command::"
msgstr ""
"Pipenvを使うと ``$ pipenv open`` コマンドで、(自分で書いたコードベースを含め) "
"インストールされているどんなPythonモジュールも開けます::"

#: ../../advanced.rst:191
msgid ""
"This allows you to easily read the code you're consuming, instead of looking"
" it up on GitHub."
msgstr "この機能のおかげで、GitHubまで見に行かなくても、今使っているコードを手軽に読めるようになります。"

#: ../../advanced.rst:193
msgid ""
"The standard ``EDITOR`` environment variable is used for this. If you're "
"using Sublime Text, for example, you'll want to ``export EDITOR=subl`` (once"
" you've installed the command-line utility)."
msgstr ""
"この機能では標準の ``EDITOR`` 環境変数が使われます。\n"
"例えば Sublime Text を使っている場合は、(コマンドラインユーティリティがインストールしてあれば) ``export EDITOR=subl`` とします。"

#: ../../advanced.rst:196
msgid "☤ Automatic Python Installation"
msgstr "☤ Pythonの自動インストール"

#: ../../advanced.rst:198
msgid ""
"If you have `pyenv <https://github.com/pyenv/pyenv#simple-python-version-"
"management-pyenv>`_ installed and configured, Pipenv will automatically ask "
"you if you want to install a required version of Python if you don't already"
" have it available."
msgstr ""
"`pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-"
"pyenv>`_ "
"のインストールと設定が済んでいて、必要とするバージョンのPythonがまだ利用できる状態になっていない場合、Pipenvは自動でそのバージョンのPythonをインストールしたいかどうかを尋ねます。"

#: ../../advanced.rst:200
msgid "This is a very fancy feature, and we're very proud of it::"
msgstr "これは非常に高度な機能で、自慢の機能です::"

#: ../../advanced.rst:231
msgid ""
"Pipenv automatically honors both the ``python_full_version`` and "
"``python_version`` `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ "
"specifiers."
msgstr ""
"Pipenv は `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ が規定する "
"``python_full_version`` と ``python_version`` の両方に従います。"

#: ../../advanced.rst:233
msgid "💫✨🍰✨💫"
msgstr "💫✨🍰✨💫"

#: ../../advanced.rst:236
msgid "☤ Automatic Loading of ``.env``"
msgstr "☤ ``.env`` の自動読み込み"

#: ../../advanced.rst:238
msgid ""
"If a ``.env`` file is present in your project, ``$ pipenv shell`` and ``$ "
"pipenv run`` will automatically load it, for you::"
msgstr ""
"プロジェクトに ``.env`` ファイルが存在する場合は、 ``$ pipenv shell`` および ``$ pipenv run`` "
"は自動で読み込みます::"

#: ../../advanced.rst:252
msgid ""
"This is very useful for keeping production credentials out of your codebase."
" We do not recommend committing ``.env`` files into source control!"
msgstr ""
"この機能は、本番環境の証明書をコードベースから避けておくのに非常に便利です。\n"
"``.env`` ファイルをソースコード管理にコミットするのはお薦めしません!"

#: ../../advanced.rst:255
msgid ""
"If your ``.env`` file is located in a different path or has a different name"
" you may set the ``PIPENV_DOTENV_LOCATION`` environment variable::"
msgstr ""
"``.env`` が別のパスに置いてあったり、別のファイル名の場合は、 ``PIPENV_DOTENV_LOCATION`` 環境変数を設定します::"

#: ../../advanced.rst:259
msgid ""
"To prevent pipenv from loading the ``.env`` file, set the "
"``PIPENV_DONT_LOAD_ENV`` environment variable::"
msgstr ""
"Pipenvが ``.env`` ファイルを読み込まないようにするには、 ``PIPENV_DONT_LOAD_ENV`` 環境変数を設定します::"

#: ../../advanced.rst:264
msgid "☤ Configuration With Environment Variables"
msgstr "☤ 環境変数による設定"

#: ../../advanced.rst:266
msgid ""
"``pipenv`` comes with a handful of options that can be enabled via shell "
"environment variables. To activate them, simply create the variable in your "
"shell and pipenv will detect it."
msgstr ""
"``pipenv`` には、シェル環境変数で有効にできるオプションが少しだけあります。\n"
"オプションを有効にするには、シェルでその変数を作成すればpipevnが見付けてくれます。"

#: ../../advanced.rst:270
msgid ""
"``PIPENV_DEFAULT_PYTHON_VERSION`` — Use this version of Python when creating"
" new virtual environments, by default (e.g. ``3.6``)."
msgstr ""
"``PIPENV_DEFAULT_PYTHON_VERSION`` — 新しい仮想環境を作るときに、デフォルトでこのバージョンのPython (例えば "
"``3.6``) が使われます。"

#: ../../advanced.rst:272
msgid ""
"``PIPENV_SHELL_FANCY`` — Always use fancy mode when invoking ``pipenv "
"shell``."
msgstr "``PIPENV_SHELL_FANCY`` — ``pipenv shell`` を呼び出すときに常に高機能モードを使用します。"

#: ../../advanced.rst:274
msgid ""
"``PIPENV_VENV_IN_PROJECT`` — If set, use ``.venv`` in your project directory"
" instead of the global virtualenv manager ``pew``."
msgstr ""
"``PIPENV_VENV_IN_PROJECT`` — 設定すると、システムグローバルな仮想環境マネージャーの ``pew`` "
"ではなく、プロジェクトディレクトリの ``.venv`` を使います。"

#: ../../advanced.rst:277
msgid "``PIPENV_COLORBLIND`` — Disable terminal colors, for some reason."
msgstr "``PIPENV_COLORBLIND`` — 何らかの理由があるときのために、ターミナルの色付けをしません。"

#: ../../advanced.rst:279
msgid ""
"``PIPENV_NOSPIN`` — Disable terminal spinner, for cleaner logs. "
"Automatically set in CI environments."
msgstr ""
"``PIPENV_NOSPIN`` — ログを綺麗にするために、端末のスピナーを無効にします。\n"
"CI環境では自動で設定されます。"

#: ../../advanced.rst:281
msgid ""
"``PIPENV_MAX_DEPTH`` — Set to an integer for the maximum number of "
"directories to recursively search for a Pipfile."
msgstr "``PIPENV_MAX_DEPTH`` — Pipfileを再帰的に探しに行くディレクトリ数の最大値を整数で設定します。"

#: ../../advanced.rst:284
msgid ""
"``PIPENV_TIMEOUT`` — Set to an integer for the max number of seconds Pipenv "
"will wait for virtualenv creation to complete.  Defaults to 120 seconds."
msgstr ""
"``PIPENV_TIMEOUT`` — 仮想環境の作成が完了するのを、Pipenvが待つ秒数の最大値を整数で設定します。デフォルトは120秒です。"

#: ../../advanced.rst:287
msgid ""
"``PIPENV_IGNORE_VIRTUALENVS`` — Set to disable automatically using an "
"activated virtualenv over the current project's own virtual environment."
msgstr ""
"``PIPENV_IGNORE_VIRTUALENVS`` — "
"設定すると、自動で有効化されている仮想環境を使わないようにし、現在のプロジェクトの仮想環境を使います。"

#: ../../advanced.rst:290
msgid ""
"``PIPENV_PIPFILE`` — When running pipenv from a $PWD other than the same "
"directory where the Pipfile is located, instruct pipenv to find the Pipfile "
"in the location specified by this environment variable."
msgstr ""

#: ../../advanced.rst:294
msgid ""
"If you'd like to set these environment variables on a per-project basis, I "
"recommend utilizing the fantastic `direnv <https://direnv.net>`_ project, in"
" order to do so."
msgstr ""
"これらの環境変数をプロジェクトごとの設定にしたい場合は、それを実現するために素敵な `direnv <https://direnv.net>`_ "
"を利用するのをお薦めします。"

#: ../../advanced.rst:296
msgid ""
"Also note that `pip itself supports environment variables "
"<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_, if you "
"need additional customization."
msgstr ""
"さらにカスタマイズする必要がある場合は、 `pip自身も環境変数をサポートしている "
"<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_ "
"ことに着目してください。"

#: ../../advanced.rst:298
msgid "For example::"
msgstr "例えば、次のようにできます::"

#: ../../advanced.rst:304
msgid "☤ Custom Virtual Environment Location"
msgstr "☤ 仮想環境の独自の配置場所"

#: ../../advanced.rst:306
msgid ""
"Pipenv's underlying ``pew`` dependency will automatically honor the "
"``WORKON_HOME`` environment variable, if you have it set — so you can tell "
"pipenv to store your virtual environments wherever you want, e.g.::"
msgstr ""
"Pipenvの依存パッケージである ``pew`` は ``WORKON_HOME`` が設定してあれば自動でそれに従います。\n"
"これにより、どこでも好きなところを指定して、Pipenvに仮想環境を保存するよう指示できます。"

#: ../../advanced.rst:311
msgid ""
"In addition, you can also have Pipenv stick the virtualenv in "
"``project/.venv`` by setting the ``PIPENV_VENV_IN_PROJECT`` environment "
"variable."
msgstr ""
"さらに、 ``PIPENV_VENV_IN_PROJECT`` 環境変数を設定することで、 ``project/.venv`` "
"にある仮想環境をPipenvに使わせることができます。"

#: ../../advanced.rst:315
msgid "☤ Testing Projects"
msgstr "☤ プロジェクトのテスト"

#: ../../advanced.rst:317
msgid ""
"Pipenv is being used in projects like `Requests`_ for declaring development "
"dependencies and running the test suite."
msgstr "Pipenvは `Requests`_ のようなプロジェクトで開発用の依存関係の宣言とテストスイートの実行に使われています。"

#: ../../advanced.rst:319
msgid ""
"We've currently tested deployments with both `Travis-CI`_ and `tox`_ with "
"success."
msgstr "現時点では `Travis-CI`_ と `tox`_ の両方で上手くデプロイのテストを行えています。"

#: ../../advanced.rst:322
msgid "Travis CI"
msgstr "Travis CI"

#: ../../advanced.rst:324
msgid ""
"An example Travis CI setup can be found in `Requests`_. The project uses a "
"Makefile to define common functions such as its ``init`` and ``tests`` "
"commands. Here is a stripped down example ``.travis.yml``::"
msgstr ""
"Travis CIの設定例は `Requests`_ にあります。\n"
"このプロジェクトではMakefileによく使う関数を ``init`` コマンドや ``tests`` コマンドとして定義してあります。\n"
"以下が ``.travis.yml`` の本質的なところを抜き出したものです::"

#: ../../advanced.rst:345
msgid "and the corresponding Makefile::"
msgstr "そして対応するMakefileは以下の通りです::"

#: ../../advanced.rst:356
msgid "Tox Automation Project"
msgstr "ToX自動化プロジェクト"

#: ../../advanced.rst:358
msgid ""
"Alternatively, you can configure a ``tox.ini`` like the one below for both "
"local and external testing::"
msgstr "または、 ``tox.ini`` を次のようにローカル環境でのテストと外部環境でのテストの両方に対して設定できます::"

#: ../../advanced.rst:380
msgid ""
"With Pipenv's default configuration, you'll need to use tox's ``passenv`` "
"parameter to pass your shell's ``HOME`` variable."
msgstr ""
"Pipenvのデフォルトの設定では、シェルの ``HOME`` 変数を渡すのにtoxの ``passenv`` パラメータを使う必要があります。"

#: ../../advanced.rst:383
msgid ""
"A 3rd party plugin, `tox-pipenv`_ is also available to use Pipenv natively "
"with tox."
msgstr "サードパーティのプラグイン `tox-pipenv`_ も、toxにPipenvを連係させるのに使えます。"

#: ../../advanced.rst:391
msgid "☤ Shell Completion"
msgstr "☤ シェルの補完"

#: ../../advanced.rst:393
msgid "To enable completion in fish, add this to your config::"
msgstr "fishで補完を有効にするには、次のコマンドを設定ファイルに追加してください::"

#: ../../advanced.rst:397
msgid "Alternatively, with bash or zsh, add this to your config::"
msgstr "また、bashやzshでは次のコマンドを設定ファイルに追加してください::"

#: ../../advanced.rst:401
msgid "Magic shell completions are now enabled!"
msgstr "魔法のシェル補完が使えるようになりました!"

#: ../../advanced.rst:406
msgid "☤ Working with Platform-Provided Python Components"
msgstr "☤ プラットフォームが提供するPythonコンポーネントを使っての作業"

#: ../../advanced.rst:408
msgid ""
"It's reasonably common for platform specific Python bindings for operating "
"system interfaces to only be available through the system package manager, "
"and hence unavailable for installation into virtual environments with `pip`."
" In these cases, the virtual environment can be created with access to the "
"system `site-packages` directory::"
msgstr ""

#: ../../advanced.rst:416
msgid ""
"To ensure that all `pip`-installable components actually are installed into "
"the virtual environment and system packages are only used for interfaces "
"that don't participate in Python-level dependency resolution at all, use the"
" `PIP_IGNORE_INSTALLED` setting::"
msgstr ""
