# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# tomo, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 2018.11.27.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-02 15:00+0000\n"
"PO-Revision-Date: 2017-09-14 00:01+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../advanced.rst:4
msgid "Advanced Usage of Pipenv"
msgstr "Pipenvの進んだ使い方"

#: ../../advanced.rst:8
msgid ""
"This document covers some of Pipenv's more glorious and advanced features."
msgstr "このドキュメントではPipenvのより輝かしい進んだ機能を対象としています。"

#: ../../advanced.rst:11
msgid "☤ Caveats"
msgstr "☤ 注意書き"

#: ../../advanced.rst:13
msgid ""
"Dependencies of wheels provided in a ``Pipfile`` will not be captured by ``$"
" pipenv lock``."
msgstr "``Pipfile`` にある依存パッケージのwheelは ``$ pipenv lock`` では捕捉されません。"

#: ../../advanced.rst:14
msgid ""
"There are some known issues with using private indexes, related to hashing. "
"We're actively working to solve this problem. You may have great luck with "
"this, however."
msgstr ""

#: ../../advanced.rst:15
msgid ""
"Installation is intended to be as deterministic as possible — use the "
"``--sequential`` flag to increase this, if experiencing issues."
msgstr ""
"インストールはできる限り決定論的になるようになっています — 問題が出た場合には ``--sequential`` "
"フラグを使ってより決定論的に振る舞うようにしてください。"

#: ../../advanced.rst:18
msgid "☤ Specifying Package Indexes"
msgstr "☤ パッケージの一覧を指定する"

#: ../../advanced.rst:20
msgid ""
"If you'd like a specific package to be installed with a specific package "
"index, you can do the following::"
msgstr "特定のパッケージ一覧で特定のパッケージをインストールしたい場合は、次のように指定できます::"

#: ../../advanced.rst:39 ../../advanced.rst:182
msgid "Very fancy."
msgstr "めっちゃ高機能。"

#: ../../advanced.rst:42
msgid "☤ Using a PyPI Mirror"
msgstr "☤ PyPIミラーを使う"

#: ../../advanced.rst:44
msgid ""
"If you'd like to override the default PyPI index urls with the url for a "
"PyPI mirror, you can use the following::"
msgstr "デフォルトのPyPIインデックスのURLをPyPIミラーのURLで上書きしたい場合は、次のオプションが使えます::"

#: ../../advanced.rst:56
msgid ""
"Alternatively, you can set the ``PIPENV_PYPI_MIRROR`` environment variable."
msgstr "その他にも、``PIPENV_PYPI_MIRROR`` 環境変数を設定することもできます。"

#: ../../advanced.rst:59
msgid "☤ Injecting credentials into Pipfiles via environment variables"
msgstr "☤ 環境変数でPipfileにクレデンシャルを差し込む"

#: ../../advanced.rst:62
msgid ""
"Pipenv will expand environment variables (if defined) in your Pipfile. Quite"
" useful if you need to authenticate to a private PyPI::"
msgstr ""
"Pipenvは (定義されていれば) Pipfileにある環境変数を展開します。\n"
"この機能はプライベートのPyPIで認証する必要がある場合に非常に便利です::"

#: ../../advanced.rst:70
msgid ""
"Luckily - pipenv will hash your Pipfile *before* expanding environment "
"variables (and, helpfully, will substitute the environment variables again "
"when you install from the lock file - so no need to commit any secrets! "
"Woo!)"
msgstr ""
"幸運なことに、Pipenvは環境変数を展開する *前に* Pipfileのハッシュを取ります "
"(そしてありがたいことに、ロックファイルからインストールするときは、再び環境変数が置き換えられます。そのため秘匿情報をコミットする必要は無いのです! "
"やったー!)"

#: ../../advanced.rst:76
msgid "☤ Specifying Basically Anything"
msgstr "☤ 基本的な事項の指定"

#: ../../advanced.rst:78
msgid ""
"If you'd like to specify that a specific package only be installed on "
"certain systems, you can use `PEP 508 specifiers "
"<https://www.python.org/dev/peps/pep-0508/>`_ to accomplish this."
msgstr ""
"ある特定のパッケージをあるシステムだけにインストールしたい場合は、 `PEP 508 指示子 "
"<https://www.python.org/dev/peps/pep-0508/>`_ を使って実現できます。"

#: ../../advanced.rst:81
msgid ""
"Here's an example ``Pipfile``, which will only install ``pywinusb`` on "
"Windows systems::"
msgstr "これが、 Windowsシステムだけに ``pywinusb`` をインストールする ``Pipfile`` の例です::"

#: ../../advanced.rst:92
msgid "Voilà!"
msgstr "ほら、見て!"

#: ../../advanced.rst:94
msgid "Here's a more complex example::"
msgstr "これがもっと複雑な例です::"

#: ../../advanced.rst:103
msgid "Magic. Pure, unadulterated magic."
msgstr "魔法です。純粋な、混じり気の無い魔法です。"

#: ../../advanced.rst:106
msgid "☤ Using pipenv for Deployments"
msgstr "☤ pipenvをデプロイで使う"

#: ../../advanced.rst:108
msgid "You may want to use ``pipenv`` as part of a deployment process."
msgstr "デプロイ手順の一部として ``pipenv`` を使いたい場合もあるでしょう。"

#: ../../advanced.rst:110
msgid ""
"You can enforce that your ``Pipfile.lock`` is up to date using the "
"``--deploy`` flag::"
msgstr "``--deploy`` フラグを使うと強制的に ``Pipfile.lock`` を最新にできます::"

#: ../../advanced.rst:114
msgid ""
"This will fail a build if the ``Pipfile.lock`` is out–of–date, instead of "
"generating a new one."
msgstr ""
"このフラグを立てると、 ``Pipfile.lock`` が古くなっている場合に、 ``Pipfile.lock`` "
"を新しく生成するのではなくビルドが失敗します。"

#: ../../advanced.rst:116
msgid ""
"Or you can install packages exactly as specified in ``Pipfile.lock`` using "
"the ``sync`` command::"
msgstr ""

#: ../../advanced.rst:122
msgid ""
"``pipenv install --ignore-pipfile`` is nearly equivalent to ``pipenv sync``,"
" but ``pipenv sync`` will *never* attempt to re-lock your dependencies as it"
" is considered an atomic operation.  ``pipenv install`` by default does "
"attempt to re-lock unless using the ``--deploy`` flag."
msgstr ""

#: ../../advanced.rst:125
msgid "Deploying System Dependencies"
msgstr ""

#: ../../advanced.rst:127
msgid ""
"You can tell Pipenv to install a Pipfile's contents into its parent system "
"with the ``--system`` flag::"
msgstr "``--system`` フラグを使って、Pipfileの内容にあるものを親システムにインストールするようPipenvに指示できます::"

#: ../../advanced.rst:131
msgid ""
"This is useful for managing the system Python, and deployment infrastructure"
" (e.g. Heroku does this)."
msgstr ""

#: ../../advanced.rst:134
msgid "☤ Pipenv and Other Python Distributions"
msgstr "☤ PipenvとCPython以外のPythonディストリビューション"

#: ../../advanced.rst:136
msgid ""
"To use Pipenv with a third-party Python distribution (e.g. Anaconda), you "
"simply provide the path to the Python binary::"
msgstr ""

#: ../../advanced.rst:140
msgid ""
"Anaconda uses Conda to manage packages. To reuse Conda–installed Python "
"packages, use the ``--site-packages`` flag::"
msgstr ""
"AnacondaはCondaでパッケージを管理しています。\n"
"CondaでインストールしたPythonのパッケージを再利用するには、 ``--site-packages`` フラグを使ってください::"

#: ../../advanced.rst:145
msgid "☤ Generating a ``requirements.txt``"
msgstr "☤ ``requirements.txt`` の生成"

#: ../../advanced.rst:147
msgid ""
"You can convert a ``Pipfile`` and ``Pipfile.lock`` into a "
"``requirements.txt`` file very easily, and get all the benefits of extras "
"and other goodies we have included."
msgstr ""
"``Pipfile`` や ``Pipfile.lock`` は ``requirements.txt`` "
"に非常に簡単に変換でき、追加機能や素敵な機能など既に実装された機能全ての恩恵を受けられます。"

#: ../../advanced.rst:149
msgid "Let's take this ``Pipfile``::"
msgstr "この ``Pipfile`` から::"

#: ../../advanced.rst:158 ../../advanced.rst:176
msgid "And generate a ``requirements.txt`` out of it::"
msgstr "``requirements.txt`` を生成しましょう::"

#: ../../advanced.rst:167
msgid ""
"If you wish to generate a ``requirements.txt`` with only the development "
"requirements you can do that too!  Let's take the following ``Pipfile``::"
msgstr ""
"開発用の依存関係だけの ``requirements.txt`` を生成したいと思った場合は、それも可能です!\n"
"次の ``Pipfile`` を用意しましょう::"

#: ../../advanced.rst:185
msgid "☤ Detection of Security Vulnerabilities"
msgstr "☤ セキュリティの脆弱性の検知"

#: ../../advanced.rst:187
msgid ""
"Pipenv includes the `safety <https://github.com/pyupio/safety>`_ package, "
"and will use it to scan your dependency graph for known security "
"vulnerabilities!"
msgstr ""
"Pipenv は `safety <https://github.com/pyupio/safety>`_ "
"パッケージを含んでいて、既知のセキュリティの脆弱性が無いか依存関係グラフを走査するのに使われます。"

#: ../../advanced.rst:190
msgid "Example::"
msgstr "例::"

#: ../../advanced.rst:231 ../../advanced.rst:529
msgid "✨🍰✨"
msgstr "✨🍰✨"

#: ../../advanced.rst:235
msgid ""
"In order to enable this functionality while maintaining its permissive "
"copyright license, `pipenv` embeds an API client key for the backend Safety "
"API operated by pyup.io rather than including a full copy of the CC-BY-NC-SA"
" licensed Safety-DB database. This embedded client key is shared across all "
"`pipenv check` users, and hence will be subject to API access throttling "
"based on overall usage rather than individual client usage."
msgstr ""

#: ../../advanced.rst:243
msgid ""
"You can also use your own safety API key by setting the environment variable"
" ``PIPENV_PYUP_API_KEY``."
msgstr ""

#: ../../advanced.rst:248
msgid "☤ Community Integrations"
msgstr "☤ コミュニティとの連係"

#: ../../advanced.rst:250
msgid ""
"There are a range of community-maintained plugins and extensions available "
"for a range of editors and IDEs, as well as different products which "
"integrate with Pipenv projects:"
msgstr ""
"Pipenvと連係する様々なプロダクトに加え、コミュニティがメンテナンスしている多種多様のプラグインや拡張があり、様々なエディタやIDEで使えます:"

#: ../../advanced.rst:253
msgid "`Heroku <https://heroku.com/python>`_ (Cloud Hosting)"
msgstr "`Heroku <https://heroku.com/python>`_ (クラウドホスティング)"

#: ../../advanced.rst:254
msgid "`Platform.sh <https://platform.sh/hosting/python>`_ (Cloud Hosting)"
msgstr "`Platform.sh <https://platform.sh/hosting/python>`_ (クラウドホスティング)"

#: ../../advanced.rst:255
msgid "`PyUp <https://pyup.io>`_ (Security Notification)"
msgstr "`PyUp <https://pyup.io>`_ (セキュリティ通知)"

#: ../../advanced.rst:256
msgid "`Emacs <https://github.com/pwalsh/pipenv.el>`_ (Editor Integration)"
msgstr "`Emacs <https://github.com/pwalsh/pipenv.el>`_ (エディタ連係)"

#: ../../advanced.rst:257
msgid ""
"`Fish Shell <https://github.com/fisherman/pipenv>`_ (Automatic ``$ pipenv "
"shell``!)"
msgstr ""
"`Fish Shell <https://github.com/fisherman/pipenv>`_ (自動 ``$ pipenv shell``!)"

#: ../../advanced.rst:258
msgid ""
"`VS Code <https://code.visualstudio.com/docs/python/environments>`_ (Editor "
"Integration)"
msgstr ""
"`VS Code <https://code.visualstudio.com/docs/python/environments>`_ (エディタ連係)"

#: ../../advanced.rst:259
msgid ""
"`PyCharm <https://www.jetbrains.com/pycharm/download/>`_ (Editor "
"Integration)"
msgstr "`PyCharm <https://www.jetbrains.com/pycharm/download/>`_ (エディタ連係)"

#: ../../advanced.rst:261
msgid "Works in progress:"
msgstr "対応中:"

#: ../../advanced.rst:263
msgid ""
"`Sublime Text <https://github.com/kennethreitz/pipenv-sublime>`_ (Editor "
"Integration)"
msgstr ""
"`Sublime Text <https://github.com/kennethreitz/pipenv-sublime>`_ (エディタ連係)"

#: ../../advanced.rst:264
msgid "Mysterious upcoming Google Cloud product (Cloud Hosting)"
msgstr "未だその姿を見せていない来たるべきGoogle Cloudプロダクト (クラウドホスティング)"

#: ../../advanced.rst:269
msgid "☤ Open a Module in Your Editor"
msgstr "☤ エディタでモジュールを開く"

#: ../../advanced.rst:271
msgid ""
"Pipenv allows you to open any Python module that is installed (including "
"ones in your codebase), with the ``$ pipenv open`` command::"
msgstr ""
"Pipenvを使うと ``$ pipenv open`` コマンドで、(自分で書いたコードベースを含め) "
"インストールされているどんなPythonモジュールも開けます::"

#: ../../advanced.rst:281
msgid ""
"This allows you to easily read the code you're consuming, instead of looking"
" it up on GitHub."
msgstr "この機能のおかげで、GitHubまで見に行かなくても、今使っているコードを手軽に読めるようになります。"

#: ../../advanced.rst:283
msgid ""
"The standard ``EDITOR`` environment variable is used for this. If you're "
"using VS Code, for example, you'll want to ``export EDITOR=code`` (if you're"
" on macOS you will want to `install the command "
"<https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-"
"line>`_ on to your ``PATH`` first)."
msgstr ""
"この機能では標準の ``EDITOR`` 環境変数が使われます。\n"
"例えばVS Codeを使っている場合は、 ``export EDITOR=code`` とします (macOSの場合は、最初に ``PATH`` に上 `コマンドをインストール <https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line>`_ します)。"

#: ../../advanced.rst:286
msgid "☤ Automatic Python Installation"
msgstr "☤ Pythonの自動インストール"

#: ../../advanced.rst:288
msgid ""
"If you have `pyenv <https://github.com/pyenv/pyenv#simple-python-version-"
"management-pyenv>`_ installed and configured, Pipenv will automatically ask "
"you if you want to install a required version of Python if you don't already"
" have it available."
msgstr ""
"`pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-"
"pyenv>`_ "
"のインストールと設定が済んでいて、必要とするバージョンのPythonがまだ利用できる状態になっていない場合、Pipenvは自動でそのバージョンのPythonをインストールしたいかどうかを尋ねます。"

#: ../../advanced.rst:290
msgid "This is a very fancy feature, and we're very proud of it::"
msgstr "これは非常に高度な機能で、自慢の機能です::"

#: ../../advanced.rst:321
msgid ""
"Pipenv automatically honors both the ``python_full_version`` and "
"``python_version`` `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ "
"specifiers."
msgstr ""
"Pipenv は `PEP 508 <https://www.python.org/dev/peps/pep-0508/>`_ が規定する "
"``python_full_version`` と ``python_version`` の両方に従います。"

#: ../../advanced.rst:323
msgid "💫✨🍰✨💫"
msgstr "💫✨🍰✨💫"

#: ../../advanced.rst:326
msgid "☤ Automatic Loading of ``.env``"
msgstr "☤ ``.env`` の自動読み込み"

#: ../../advanced.rst:328
msgid ""
"If a ``.env`` file is present in your project, ``$ pipenv shell`` and ``$ "
"pipenv run`` will automatically load it, for you::"
msgstr ""
"プロジェクトに ``.env`` ファイルが存在する場合は、 ``$ pipenv shell`` および ``$ pipenv run`` "
"は自動で読み込みます::"

#: ../../advanced.rst:342
msgid ""
"This is very useful for keeping production credentials out of your codebase."
" We do not recommend committing ``.env`` files into source control!"
msgstr ""
"この機能は、本番環境の証明書をコードベースから避けておくのに非常に便利です。\n"
"``.env`` ファイルをソースコード管理にコミットするのはお薦めしません!"

#: ../../advanced.rst:345
msgid ""
"If your ``.env`` file is located in a different path or has a different name"
" you may set the ``PIPENV_DOTENV_LOCATION`` environment variable::"
msgstr ""
"``.env`` が別のパスに置いてあったり、別のファイル名の場合は、 ``PIPENV_DOTENV_LOCATION`` 環境変数を設定します::"

#: ../../advanced.rst:349
msgid ""
"To prevent pipenv from loading the ``.env`` file, set the "
"``PIPENV_DONT_LOAD_ENV`` environment variable::"
msgstr ""
"Pipenvが ``.env`` ファイルを読み込まないようにするには、 ``PIPENV_DONT_LOAD_ENV`` 環境変数を設定します::"

#: ../../advanced.rst:354
msgid "☤ Custom Script Shortcuts"
msgstr "☤ 独自のスクリプトショートカット"

#: ../../advanced.rst:356
msgid ""
"Pipenv supports creating custom shortcuts in the (optional) ``[scripts]`` "
"section of your Pipfile."
msgstr ""

#: ../../advanced.rst:358
msgid ""
"You can then run ``pipenv run <shortcut name>`` in your terminal to run the "
"command in the context of your pipenv virtual environment even if you have "
"not activated the pipenv shell first."
msgstr ""

#: ../../advanced.rst:361
msgid "For example, in your Pipfile::"
msgstr ""

#: ../../advanced.rst:366
msgid "And then in your terminal::"
msgstr ""

#: ../../advanced.rst:371
msgid "Commands that expect arguments will also work. For example::"
msgstr ""

#: ../../advanced.rst:381
msgid "☤ Support for Environment Variables"
msgstr "☤ 環境変数のサポート"

#: ../../advanced.rst:383
msgid ""
"Pipenv supports the usage of environment variables in values. For example::"
msgstr ""
"Pipenvでは、値の中で環境変数が使えます。\n"
"次の例を見てください::"

#: ../../advanced.rst:397
msgid ""
"Environment variables may be specified as ``${MY_ENVAR}`` or ``$MY_ENVAR``. "
"On Windows, ``%MY_ENVAR%`` is supported in addition to ``${MY_ENVAR}`` or "
"``$MY_ENVAR``."
msgstr ""
"環境変数は ``${MY_ENVAR}`` や ``$MY_ENVAR`` のように指定します。\n"
"Windowsでは、 ``${MY_ENVAR}`` と ``$MY_ENVAR`` に加えて ``%MY_ENVAR%`` もサポートされています。"

#: ../../advanced.rst:402
msgid "☤ Configuration With Environment Variables"
msgstr "☤ 環境変数による設定"

#: ../../advanced.rst:404
msgid ""
"Pipenv comes with a handful of options that can be enabled via shell "
"environment variables. To activate them, simply create the variable in your "
"shell and pipenv will detect it."
msgstr ""
"Pipenvには、シェル環境変数で有効にできるオプションが少しだけあります。\n"
"オプションを有効にするには、シェルでその変数を作成すればpipevnが見付けてくれます。"

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_CACHE_DIR:1
msgid "Location for Pipenv to store it's package cache."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_CACHE_DIR:3
msgid "Default is to use appdir's user cache directory."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_COLORBLIND:1
msgid "If set, disable terminal colors."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_COLORBLIND:3
msgid ""
"Some people don't like colors in their terminals, for some reason. Default "
"is to show colors."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DEFAULT_PYTHON_VERSION:1
msgid ""
"Use this Python version when creating new virtual environments by default."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DEFAULT_PYTHON_VERSION:3
msgid ""
"This can be set to a version string, e.g. ``3.6``, or a path. Default is to "
"use whatever Python Pipenv is installed under (i.e. ``sys.executable``). "
"Command line flags (e.g. ``--python``, ``--three``, and ``--two``) are "
"prioritized over this configuration."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DONT_LOAD_ENV:1
msgid "If set, Pipenv does not load the ``.env`` file."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DONT_LOAD_ENV:3
msgid "Default is to load ``.env`` for ``run`` and ``shell`` commands."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DONT_USE_PYENV:1
msgid "If set, Pipenv does not attempt to install Python with pyenv."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DONT_USE_PYENV:3
msgid ""
"Default is to install Python automatically via pyenv when needed, if "
"possible."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DOTENV_LOCATION:1
msgid "If set, Pipenv loads the ``.env`` file at the specified location."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_DOTENV_LOCATION:3
msgid "Default is to load ``.env`` from the project root, if found."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_EMULATOR:1
msgid "If set, the terminal emulator's name for ``pipenv shell`` to use."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_EMULATOR:3
msgid ""
"Default is to detect emulators automatically. This should be set if your "
"emulator, e.g. Cmder, cannot be detected correctly."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_HIDE_EMOJIS:1
msgid "Disable emojis in output."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_HIDE_EMOJIS:3
msgid "Default is to show emojis. This is automatically set on Windows."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_IGNORE_VIRTUALENVS:1
msgid ""
"If set, Pipenv will always assign a virtual environment for this project."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_IGNORE_VIRTUALENVS:3
msgid ""
"By default, Pipenv tries to detect whether it is run inside a virtual "
"environment, and reuses it if possible. This is usually the desired "
"behavior, and enables the user to use any user-built environments with "
"Pipenv."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_INSTALL_TIMEOUT:1
msgid "Max number of seconds to wait for package installation."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_INSTALL_TIMEOUT:3
msgid "Defaults to 900 (15 minutes), a very long arbitrary time."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_DEPTH:1
msgid "Maximum number of directories to recursively search for a Pipfile."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_DEPTH:3
msgid "Default is 3. See also ``PIPENV_NO_INHERIT``."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_RETRIES:1
msgid "Specify how many retries Pipenv should attempt for network requests."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_RETRIES:3
msgid ""
"Default is 0. Automatically set to 1 on CI environments for robust testing."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_ROUNDS:1
msgid "Tells Pipenv how many rounds of resolving to do for Pip-Tools."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_ROUNDS:3
msgid "Default is 16, an arbitrary number that works most of the time."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_SUBPROCESS:1
msgid "How many subprocesses should Pipenv use when installing."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_MAX_SUBPROCESS:3
msgid "Default is 16, an arbitrary number that seems to work."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_NOSPIN:1
msgid "If set, disable terminal spinner."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_NOSPIN:3
msgid ""
"This can make the logs cleaner. Automatically set on Windows, and in CI "
"environments."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_NO_INHERIT:1
msgid "Tell Pipenv not to inherit parent directories."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_NO_INHERIT:3
msgid ""
"This is useful for deployment to avoid using the wrong current directory. "
"Overwrites ``PIPENV_MAX_DEPTH``."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_PIPFILE:1
msgid "If set, this specifies a custom Pipfile location."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_PIPFILE:3
msgid ""
"When running pipenv from a location other than the same directory where the "
"Pipfile is located, instruct pipenv to find the Pipfile in the location "
"specified by this environment variable."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_PIPFILE:7
msgid ""
"Default is to find Pipfile automatically in the current and parent "
"directories. See also ``PIPENV_MAX_DEPTH``."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_PYPI_MIRROR:1
msgid "If set, tells pipenv to override PyPI index urls with a mirror."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_PYPI_MIRROR:3
msgid ""
"Default is to not mirror PyPI, i.e. use the real one, pypi.org. The "
"``--pypi-mirror`` command line flag overwrites this."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SHELL:1
msgid "An absolute path to the preferred shell for ``pipenv shell``."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SHELL:3
msgid "Default is to detect automatically what shell is currently in use."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SHELL_FANCY:1
msgid "If set, always use fancy mode when invoking ``pipenv shell``."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SHELL_FANCY:3
msgid "Default is to use the compatibility shell if possible."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SKIP_LOCK:1
msgid "If set, Pipenv won't lock dependencies automatically."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SKIP_LOCK:3
msgid ""
"This might be desirable if a project has large number of dependencies, "
"because locking is an inherently slow operation."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SKIP_LOCK:6
msgid ""
"Default is to lock dependencies and update ``Pipfile.lock`` on each run."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SKIP_LOCK:8
msgid "NOTE: This only affects the ``install`` and ``uninstall`` commands."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SPINNER:1
msgid "Sets the default spinner type."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_SPINNER:3
msgid ""
"Spinners are identitcal to the node.js spinners and can be found at "
"https://github.com/sindresorhus/cli-spinners"
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_TIMEOUT:1
msgid ""
"Max number of seconds Pipenv will wait for virtualenv creation to complete."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_TIMEOUT:3
msgid "Default is 120 seconds, an arbitrary number that seems to work."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_VENV_IN_PROJECT:1
msgid "If set, creates ``.venv`` in your project directory."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_VENV_IN_PROJECT:3
msgid "Default is to create new virtual environments in a global location."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_YES:1
msgid "If set, Pipenv automatically assumes \"yes\" at all prompts."
msgstr ""

#: ../../../pipenv/environments.pydocstring of
#: pipenv.environments.PIPENV_YES:3
msgid ""
"Default is to prompt the user for an answer if the current command line "
"session if interactive."
msgstr ""

#: ../../advanced.rst:411
msgid ""
"If you'd like to set these environment variables on a per-project basis, I "
"recommend utilizing the fantastic `direnv <https://direnv.net>`_ project, in"
" order to do so."
msgstr ""
"これらの環境変数をプロジェクトごとの設定にしたい場合は、それを実現するために素敵な `direnv <https://direnv.net>`_ "
"を利用するのをお薦めします。"

#: ../../advanced.rst:413
msgid ""
"Also note that `pip itself supports environment variables "
"<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_, if you "
"need additional customization."
msgstr ""
"さらにカスタマイズする必要がある場合は、 `pip自身も環境変数をサポートしている "
"<https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_ "
"ことに着目してください。"

#: ../../advanced.rst:415
msgid "For example::"
msgstr "例えば、次のようにできます::"

#: ../../advanced.rst:421
msgid "☤ Custom Virtual Environment Location"
msgstr "☤ 仮想環境の独自の配置場所"

#: ../../advanced.rst:423
msgid ""
"Pipenv automatically honors the ``WORKON_HOME`` environment variable, if you"
" have it set — so you can tell pipenv to store your virtual environments "
"wherever you want, e.g.::"
msgstr ""

#: ../../advanced.rst:429
msgid ""
"In addition, you can also have Pipenv stick the virtualenv in "
"``project/.venv`` by setting the ``PIPENV_VENV_IN_PROJECT`` environment "
"variable."
msgstr ""
"さらに、 ``PIPENV_VENV_IN_PROJECT`` 環境変数を設定することで、 ``project/.venv`` "
"にある仮想環境をPipenvに使わせることができます。"

#: ../../advanced.rst:433
msgid "☤ Testing Projects"
msgstr "☤ プロジェクトのテスト"

#: ../../advanced.rst:435
msgid ""
"Pipenv is being used in projects like `Requests`_ for declaring development "
"dependencies and running the test suite."
msgstr "Pipenvは `Requests`_ のようなプロジェクトで開発用の依存関係の宣言とテストスイートの実行に使われています。"

#: ../../advanced.rst:437
msgid ""
"We've currently tested deployments with both `Travis-CI`_ and `tox`_ with "
"success."
msgstr "現時点では `Travis-CI`_ と `tox`_ の両方で上手くデプロイのテストを行えています。"

#: ../../advanced.rst:440
msgid "Travis CI"
msgstr "Travis CI"

#: ../../advanced.rst:442
msgid ""
"An example Travis CI setup can be found in `Requests`_. The project uses a "
"Makefile to define common functions such as its ``init`` and ``tests`` "
"commands. Here is a stripped down example ``.travis.yml``::"
msgstr ""
"Travis CIの設定例は `Requests`_ にあります。\n"
"このプロジェクトではMakefileによく使う関数を ``init`` コマンドや ``tests`` コマンドとして定義してあります。\n"
"以下が ``.travis.yml`` の本質的なところを抜き出したものです::"

#: ../../advanced.rst:463
msgid "and the corresponding Makefile::"
msgstr "そして対応するMakefileは以下の通りです::"

#: ../../advanced.rst:474
msgid "Tox Automation Project"
msgstr "ToX自動化プロジェクト"

#: ../../advanced.rst:476
msgid ""
"Alternatively, you can configure a ``tox.ini`` like the one below for both "
"local and external testing::"
msgstr "または、 ``tox.ini`` を次のようにローカル環境でのテストと外部環境でのテストの両方に対して設定できます::"

#: ../../advanced.rst:495
msgid ""
"Pipenv will automatically use the virtualenv provided by ``tox``. If "
"``pipenv install --dev`` installs e.g. ``pytest``, then installed command "
"``py.test`` will be present in given virtualenv and can be called directly "
"by ``py.test tests`` instead of ``pipenv run py.test tests``."
msgstr ""
"Pipenvは自動的に ``tox`` が提供する仮想環境を使います。\n"
"``pipenv install --dev`` が例えば ``pytest`` をインストールしたならば、インストールされたコマンド ``py.test`` は与えられた仮想環境に入っていて、 ``pipenv run py.test tests`` としなくても ``py.test tests`` と直接呼び出せます。"

#: ../../advanced.rst:497
msgid ""
"You might also want to add ``--ignore-pipfile`` to ``pipenv install``, as to"
" not accidentally modify the lock-file on each test run. This causes Pipenv "
"to ignore changes to the ``Pipfile`` and (more importantly) prevents it from"
" adding the current environment to ``Pipfile.lock``. This might be important"
" as the current environment (i.e. the virtualenv provisioned by tox) will "
"usually contain the current project (which may or may not be desired) and "
"additional dependencies from ``tox``'s ``deps`` directive. The initial "
"provisioning may alternatively be disabled by adding ``skip_install = True``"
" to tox.ini."
msgstr ""
"テストを実行するたびにうっかりlockファイルを編集してしまわないように、 ``pipenv install`` に ``--ignore-pipfile`` を付けたいと思うかもしれません。\n"
"これをするとPipenvが ``Pipfile`` への変更を無視してしまうのと、(もっと重要なこととして) 現在の環境を ``Pipfile.lock`` に追加するのを防ぎます。\n"
"これが重要な点なのは、今いる環境 (すなわちtoxが用意した仮想環境) は通常は (望ましいもしくは望しくないことに) 現時点のプロジェクトと、 ``tox`` の ``deps`` に設定されている追加の依存関係を含んでいるためです。\n"
"最初に用意される環境に対しては、この方法ではなく ``skip_install = True`` をtox.iniに追加することで無効化できます。"

#: ../../advanced.rst:506
msgid ""
"This method requires you to be explicit about updating the lock-file, which "
"is probably a good idea in any case."
msgstr "この方法はlockファイルの更新に関しての明示的な指定が必要であり、おそらくこれがどのケースにおいても良い案です。"

#: ../../advanced.rst:509
msgid ""
"A 3rd party plugin, `tox-pipenv`_ is also available to use Pipenv natively "
"with tox."
msgstr "サードパーティのプラグイン `tox-pipenv`_ も、toxにPipenvを連係させるのに使えます。"

#: ../../advanced.rst:517
msgid "☤ Shell Completion"
msgstr "☤ シェルの補完"

#: ../../advanced.rst:519
msgid "To enable completion in fish, add this to your config::"
msgstr "fishで補完を有効にするには、次のコマンドを設定ファイルに追加してください::"

#: ../../advanced.rst:523
msgid "Alternatively, with bash or zsh, add this to your config::"
msgstr "また、bashやzshでは次のコマンドを設定ファイルに追加してください::"

#: ../../advanced.rst:527
msgid "Magic shell completions are now enabled!"
msgstr "魔法のシェル補完が使えるようになりました!"

#: ../../advanced.rst:532
msgid "☤ Working with Platform-Provided Python Components"
msgstr "☤ プラットフォームが提供するPythonコンポーネントを使っての作業"

#: ../../advanced.rst:534
msgid ""
"It's reasonably common for platform specific Python bindings for operating "
"system interfaces to only be available through the system package manager, "
"and hence unavailable for installation into virtual environments with `pip`."
" In these cases, the virtual environment can be created with access to the "
"system `site-packages` directory::"
msgstr ""
"オペレーティングシステムのインターフェースに使われているプラットフォーム固有のPythonは、システムのパッケージマネージャからしか利用できず、従って `pip` を使った仮想環境へのインストールには使えないのが合理的に考えて普通です。\n"
"このようなケースでは、システムの `site-packages` ディレクトリにアクセスできる仮想環境を作ります::"

#: ../../advanced.rst:542
msgid ""
"To ensure that all `pip`-installable components actually are installed into "
"the virtual environment and system packages are only used for interfaces "
"that don't participate in Python-level dependency resolution at all, use the"
" `PIP_IGNORE_INSTALLED` setting::"
msgstr ""
"`pip` "
"でインストールできるコンポーネントが本当に仮想環境にインストールされ、システムのパッケージはPythonレベルでの依存関係解決に一切現れないインターフェースのために使われることを保証するために、"
" `PIP_IGNORE_INSTALLED` 設定を使いましょう::"

#: ../../advanced.rst:553
msgid "☤ Pipfile vs setup.py"
msgstr "☤ Pipfile vs setup.py"

#: ../../advanced.rst:555
msgid ""
"There is a subtle but very important distinction to be made between "
"**applications** and **libraries**. This is a very common source of "
"confusion in the Python community."
msgstr ""
"**アプリケーション** と **ライブラリ** の間には、微妙だが非常に重要な違いがあります。\n"
"これはPythonコミュニティでよく起こる混乱の元になっています。"

#: ../../advanced.rst:557
msgid ""
"Libraries provide reusable functionality to other libraries and applications"
" (let's use the umbrella term **projects** here). They are required to work "
"alongside other libraries, all with their own set of subdependencies. They "
"define **abstract dependencies**. To avoid version conflicts in "
"subdependencies of different libraries within a project, libraries should "
"never ever pin dependency versions. Although they may specify lower or (less"
" frequently) upper bounds, if they rely on some specific feature/fix/bug. "
"Library dependencies are specified via ``install_requires`` in ``setup.py``."
msgstr ""
"ライブラリは、再利用可能な機能を他のライブラリやアプリケーション (ここでは両方を包括する用語として **プロジェクト** を使います) に提供します。\n"
"ライブラリは、自身を起点とする依存関係である他のライブラリと共に協調して動作する必要があります。\n"
"ライブラリは **抽象的な依存関係** を定義します。\n"
"プロジェクトに含まれる別々のライブラリのそれぞれを起点とする依存関係どうしで、バージョンの衝突が起きないようにライブラリは絶対に依存パッケージのバージョンを固定するべきではありません。\n"
"ある特定の機能や修正やバグに依存している場合には、バージョンの下限や (滅多に無いですが) 上限を指定することもあります。\n"
"ライブラリの依存関係は ``setup.py`` では ``install_requires`` で指定します。"

#: ../../advanced.rst:559
msgid ""
"Libraries are ultimately meant to be used in some **application**. "
"Applications are different in that they usually are not depended on by other"
" projects. They are meant to be deployed into some specific environment and "
"only then should the exact versions of all their dependencies and "
"subdependencies be made concrete. To make this process easier is currently "
"the main goal of Pipenv."
msgstr ""
"ライブラリは究極的には、とある **アプリケーション** で使われるためのものです。\n"
"アプリケーションはそれとは違って、通常は他のプロジェクトから依存されることはありません。\n"
"アプリケーションは、ある特定の環境に配置され、依存関係やさらにその先の依存関係全ての正確なバージョンが具体的であるようになっています。\n"
"この処理をより簡単にすることが、現在Pipenvの最も重要な目標です。"

#: ../../advanced.rst:561
msgid "To summarize:"
msgstr "まとめると次のようになります:"

#: ../../advanced.rst:563
msgid ""
"For libraries, define **abstract dependencies** via ``install_requires`` in "
"``setup.py``. The decision of which version exactly to be installed and "
"where to obtain that dependency is not yours to make!"
msgstr ""
"ライブラリは、 ``setup.py`` の ``install_requires`` で **抽象的な依存関係** を定義します。\n"
"厳密にどのバージョンをインストールし、どこから依存パッケージを取得するかの判断は、あなたが決めることではありません!"

#: ../../advanced.rst:564
msgid ""
"For applications, define **dependencies and where to get them** in the "
"`Pipfile` and use this file to update the set of **concrete dependencies** "
"in ``Pipfile.lock``. This file defines a specific idempotent environment "
"that is known to work for your project. The ``Pipfile.lock`` is your source "
"of truth. The ``Pipfile`` is a convenience for you to create that lock-file,"
" in that it allows you to still remain somewhat vague about the exact "
"version of a dependency to be used. Pipenv is there to help you define a "
"working conflict-free set of specific dependency-versions, which would "
"otherwise be a very tedious task."
msgstr ""
"アプリケーションは、 `Pipfile` に **依存関係とそれをどこから取得するか** を定義し、Pipfileを使って ``Pipfile.lock`` にある **具体的な依存関係** たちを更新します。\n"
"Pipfile.lockは、プロジェクトがきちんと動くことが分かっている特定の冪等な環境を定義します。\n"
"``Pipfile.lock`` は正しさの源泉です。\n"
"``Pipfile`` はそのlockファイルを作るのに便利なもので、実際に使う依存関係の正確なバージョンについて、曖昧なままにしておけます。\n"
"Pipenvは、きちんと動作する衝突の起きない依存関係のバージョン指定を定義する助けになります。他のツールではこの作業は非常にうんざりするものになります。"

#: ../../advanced.rst:565
msgid ""
"Of course, ``Pipfile`` and Pipenv are still useful for library developers, "
"as they can be used to define a development or test environment."
msgstr "もちろん、 ``Pipfile`` とPipenvはライブラリの開発者にも便利なもので、開発環境やテスト環境を定義するのに使えます。"

#: ../../advanced.rst:566
msgid ""
"And, of course, there are projects for which the distinction between library"
" and application isn't that clear. In that case, use ``install_requires`` "
"alongside Pipenv and ``Pipfile``."
msgstr ""
"そして当り前ですが、ライブラリとアプリケーションの区別が明確でないプロジェクトもあります。\n"
"その場合は、Pipenvおよび ``Pipfile`` と一緒に ``install_requires`` を使ってください。"

#: ../../advanced.rst:568
msgid "You can also do this::"
msgstr "次のようにもできます::"

#: ../../advanced.rst:572
msgid ""
"This will tell Pipenv to lock all your ``setup.py``–declared dependencies."
msgstr "このコマンドでは、 ``setup.py`` で宣言されている依存関係を全てロックするようにPipenvに指示しています。"

#: ../../advanced.rst:575
msgid "☤ Changing Pipenv's Cache Location"
msgstr "☤ Pipenvのキャッシュの場所を変更する"

#: ../../advanced.rst:577
msgid ""
"You can force Pipenv to use a different cache location by setting the "
"environment variable ``PIPENV_CACHE_DIR`` to the location you wish. This is "
"useful in the same situations that you would change ``PIP_CACHE_DIR`` to a "
"different directory."
msgstr ""
"環境変数 ``PIPENV_CACHE_DIR`` を好きな場所に設定することで、デフォルトと異なるキャッシュの場所を使うようPipenvに強制できます。\n"
"これは ``PIP_CACHE_DIR`` を別のディレクトリに変更しているのと同じ状況で役に立ちます。"

#: ../../advanced.rst:580
msgid "☤ Changing Default Python Versions"
msgstr "☤ Pythonのデフォルトバージョンを変更する"

#: ../../advanced.rst:582
msgid ""
"By default, Pipenv will initialize a project using whatever version of "
"python the python3 is. Besides starting a project with the ``--three`` or "
"``--two`` flags, you can also use ``PIPENV_DEFAULT_PYTHON_VERSION`` to "
"specify what version to use when starting a project when ``--three`` or "
"``--two`` aren't used."
msgstr ""
"デフォルトでは、Pipenvはプロジェクトの初期化にpython3のどれかのバージョンを使います。\n"
"``--three`` フラグもしくは ``--two`` フラグを付けてプロジェクトを始める他に、  ``--three`` や ``--two`` を付けていないときには ``PIPENV_DEFAULT_PYTHON_VERSION`` を使ってプロジェクトを始めるときにどのバージョンを使うかを指定できます。"
