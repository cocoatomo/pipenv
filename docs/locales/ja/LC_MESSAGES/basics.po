# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 7.8.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-25 08:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo <cocoatomo77@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../basics.rst:4
msgid "Pipenv & Virtual Environments"
msgstr "pipenvと仮想環境"

#: ../../basics.rst:8
msgid "This tutorial walks you through installing and using Python packages."
msgstr "このチュートリアルでは、Pythonのパッケージをインストールして使う体験をしてもらいます。"

#: ../../basics.rst:10
msgid ""
"It will show you how to install and use the necessary tools and make strong "
"recommendations on best practices. Keep in mind that Python is used for a "
"great many different purposes, and precisely how you want to manage your "
"dependencies may change based on how you decide to publish your software. "
"The guidance presented here is most directly applicable to the development "
"and deployment of network services (including web applications), but is also"
" very well suited to managing development and testing environments for any "
"kind of project."
msgstr ""
"このチュートリアルは必要とするツールをインストールして使う方法を解説し、ベストプラクティスを強く推奨するものです。\n"
"Pythonは非常に多岐に渡る目的に使われていて、依存関係をどのように管理したいかは厳密には、どのようにソフトウェアの公開を決めるかによって変わるかもしれないことを心に留めておいてください。\n"
"このガイダンスを直接適用するのに一番向いているのは、(Webアプリケーションを含む) ネットワークサービスの開発とデプロイですが、どんな種類のプロジェクトの開発環境やテスト環境の管理にも非常によく適したものになっています。"

#: ../../basics.rst:18
msgid ""
"This guide is written for Python 3, however, these instructions should work "
"fine on Python 2.7—if you are still using it, for some reason."
msgstr ""
"このガイドはPython 3向けに書かれていますが、とある理由でまだPython 2.7を使っている場合でも、それぞれの指示はきちんと動くでしょう。"

#: ../../basics.rst:23
msgid "☤  Make sure you've got Python & pip"
msgstr "☤  Pythonとpipがあるかの確認"

#: ../../basics.rst:25
msgid ""
"Before you go any further, make sure you have Python and that it's avalable "
"from your command line. You can check this by simply running:"
msgstr ""
"先に進む前に、Pythonがインストールしてあって、コマンドラインから使えることを確認してください。\n"
"次のコマンドを実行して確認できます:"

#: ../../basics.rst:32
msgid ""
"You should get some output like ``3.6.2``. If you do not have Python, please"
" install the latest 3.x version from `python.org`_ or refer to the "
"`Installing Python`_ section of *The Hitchhiker's Guide to Python*."
msgstr ""
"``3.6.2`` のような表示が出力されたと思います。\n"
"もしPythonをインストールしていなかったら、 `python.org`_ から最新のバージョン3.xをインストールするか、 *The Hitchhiker's Guide to Python* の `Installing Python`_ 節を参照してください。"

#: ../../basics.rst:36
msgid "If you're newcomer and you get an error like this:"
msgstr "もしあなたが初心者で次のようなエラーが出てしまったら:"

#: ../../basics.rst:45
msgid ""
"It's because this command is intended to be run in a *shell* (also called a "
"*terminal* or *console*). See the Python for Beginners `getting started "
"tutorial`_ for an introduction to using your operating system's shell and "
"interacting with Python."
msgstr ""
"このエラーが起きたのは、 ``python`` コマンドは *シェル* (*ターミナル* や *コンソール* とも呼ばれます) で動かすものだからです。\n"
"Python for Beginnersというサイトの `getting started tutorial`_ を参照し、OSのシェルの使い方やPythonとやり取りする入門をしてください。"

#: ../../basics.rst:50
msgid ""
"Additionally, you'll need to make sure you have :ref:`pip` available. You "
"can check this by running:"
msgstr ""
"さらに、 :ref:`pip` が使える状態にあるかを確認する必要があります。\n"
"次のコマンドを実行して確認できます:"

#: ../../basics.rst:57
msgid ""
"If you installed Python from source, with an installer from `python.org`_, "
"or via `Homebrew`_ you should already have pip. If you're on Linux and "
"installed using your OS package manager, you may have to `install pip "
"<https://pip.pypa.io/en/stable/installing/>`_ separately."
msgstr ""
"ソースコードや `python.org`_ のインストーラーや  `Homebrew`_ からPythonをインストールした場合は、既にpipがインストールされているはずです。\n"
"Linuxを使っていて、OSのパッケージマネージャーを使ってインストールした場合には、それとは別に `pipのインストール <https://pip.pypa.io/en/stable/installing/>`_ をしなければならないかもしれません。"

#: ../../basics.rst:68
msgid "☤ Installing Pipenv"
msgstr "☤ Pipenvのインストール"

#: ../../basics.rst:70
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit "
"to those tools. While :ref:`pip` can install Python packages, Pipenv is "
"recommended as it's a higher-level tool that simplifies dependency "
"management for common use cases."
msgstr ""
":ref:`Pipenv` はPythonプロジェクトのための依存関係管理ツールです。\n"
"もしNode.jsの `npm`_ やRubyの `bundler`_ に馴染みがあるなら、Pipenvはそれらのツールとやりたいことはよく似ています。\n"
":ref:`pip` はPythonのパッケージをインストールできますが、Pipenvは通常のユースケースでの依存関係管理を簡単にするより高度なツールとして推奨されています。"

#: ../../basics.rst:76
msgid "Use ``pip`` to install Pipenv:"
msgstr "次の通り ``pip`` でPipenvをインストールしてください:"

#: ../../basics.rst:83
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation, "
"you'll need to add the `user base`_'s ``bin`` directory to your ``PATH``. "
"You can find the user base by running ``python -m site`` which will print "
"site information including the user base. For example, on Linux this will "
"return ``USER_BASE: '~/.local'`` so you'll need to add ``~/.local/bin`` to "
"your ``PATH``. On Linux and macOS you can set your ``PATH`` permanently by "
"`modifying ~/.profile`_. On Windows you can set the user ``PATH`` "
"permanently in the `Control Panel`_."
msgstr ""
"このコマンドは、システム全体で使っているパッケージを壊さないようにするため、 `ユーザーインストール <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を行います。\n"
"インストールしたのに ``pipenv`` がシェルで使えない場合は、 `ユーザー基底ディレクトリ <https://docs.python.org/3/library/site.html#site.USER_BASE>`_ の ``bin`` ディレクトリを ``PATH`` に追加する必要があります。\n"
"user baseを含む場所の情報を出力する ``python -m site`` を実行すると、ユーザー基底ディレクトリの場所が分かります。\n"
"例えば、Linuxではこのコマンドは ``USER_BASE: '~/.local'`` を返すので、 ``~/.local/bin`` を ``PATH`` に追加する必要があります。\n"
"LinuxとmacOSでは `~/.profileを修正 <https://stackoverflow.com/a/14638025>`_ して、永続的な ``PATH`` の設定を行います。\n"
"Windowsでは `コントロールパネル <https://msdn.microsoft.com/en-us/library/windows/desktop/bb776899(v=vs.85).aspx>`_ から、永続的なユーザーの ``PATH`` の設定を行います。"

#: ../../basics.rst:101
msgid "☤ Installing packages for your project"
msgstr "☤ プロジェクトで使うパッケージのインストール"

#: ../../basics.rst:103
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this "
"tutorial) and run:"
msgstr ""
"Pipenvはプロジェクトごとに依存関係を管理します。\n"
"パッケージをインストールするには、プロジェクトのディレクトリ (もしくは、このチュートリアル用の空ディレクトリ) に移動して、次のコマンドを実行してください:"

#: ../../basics.rst:112
msgid ""
"Pipenv will install the excellent `Requests`_ library and create a "
"``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used "
"to track which dependencies your project needs in case you need to re-"
"install them, such as when you share your project with others. You should "
"get output similar to this (although the exact paths shown will vary):"
msgstr ""
"Pipenvは非常に優れた `Requests`_ ライブラリをインストールし、プロジェクトディレクトリに ``Pipfile`` を作成します。\n"
":ref:`Pipfile` は、プロジェクトを他の人に共有するときのように、依存関係を再インストールする必要が出てきたときに、プロジェクトがどの依存関係を必要としているのかを追跡するのに使います。\n"
"これに似た出力が表示されるはずです (もっとも、表示されている正確なパスは異なるでしょう):"

#: ../../basics.rst:149
msgid "☤ Using installed packages"
msgstr "☤ インストールされたパッケージを使う"

#: ../../basics.rst:151
msgid ""
"Now that Requests is installed you can create a simple ``main.py`` file to "
"use it:"
msgstr "これでRequestsがインストールされたので、単純な ``main.py`` ファイルを作成し、Requestsを使えます:"

#: ../../basics.rst:162
msgid "Then you can run this script using ``pipenv run``:"
msgstr "そして ``pipenv run`` を使って、このスクリプトが実行できます:"

#: ../../basics.rst:168
msgid "You should get output similar to this:"
msgstr "これに似た出力が表示されるはずです:"

#: ../../basics.rst:174
msgid ""
"Using ``$ pipenv run`` ensures that your installed packages are available to"
" your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``$ pipenv shell``."
msgstr ""
"``$ pipenv run`` を使うと、インストールしたパッケージがスクリプトから使えることが保証されます。\n"
"インストールしたパッケージに全てのコマンドがアクセスできることが保証された新しいシェルの起動もできます。"

#: ../../basics.rst:180
msgid "☤ Next steps"
msgstr "☤ 次のステップ"

#: ../../basics.rst:182
msgid ""
"Congratulations, you now know how to install and use Python packages! ✨ 🍰 ✨"
msgstr "おめでとうございます、Pythonのパッケージをインストールして使う方法が学べました! ✨ 🍰 ✨"
