# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# tomo, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 2018.11.27.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-02 15:00+0000\n"
"PO-Revision-Date: 2017-09-14 00:01+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../basics.rst:4
msgid "Basic Usage of Pipenv"
msgstr "Pipenvの基本的な使い方"

#: ../../basics.rst:8
msgid "This document covers some of Pipenv's more basic features."
msgstr "このドキュメントではPipenvのより基本的な機能を対象としています。"

#: ../../basics.rst:11
msgid "☤ Example Pipfile & Pipfile.lock"
msgstr "☤ PipfileとPipfile.lockの例"

#: ../../basics.rst:15
msgid ""
"Here is a simple example of a ``Pipfile`` and the resulting "
"``Pipfile.lock``."
msgstr "``Pipfile`` とそこから生成された ``Pipfile.lock`` の簡単な例を示します。"

#: ../../basics.rst:18
msgid "Example Pipfile"
msgstr "Pipfileの例"

#: ../../basics.rst:36
msgid "Example Pipfile.lock"
msgstr "Pipfile.lockの例"

#: ../../basics.rst:124
msgid "☤ General Recommendations & Version Control"
msgstr "☤ 一般的なオススメの方法とバージョン管理"

#: ../../basics.rst:126
msgid ""
"Generally, keep both ``Pipfile`` and ``Pipfile.lock`` in version control."
msgstr "一般的には、 ``Pipfile`` と ``Pipfile.lock`` の両方をバージョン管理してください。"

#: ../../basics.rst:127
msgid ""
"Do not keep ``Pipfile.lock`` in version control if multiple versions of "
"Python are being targeted."
msgstr "複数バージョンのPythonを対象とする場合は、 ``Pipfile.lock`` はバージョン管理に含めないでください。"

#: ../../basics.rst:128
msgid ""
"Specify your target Python version in your `Pipfile`'s ``[requires]`` "
"section. Ideally, you should only have one target Python version, as this is"
" a deployment tool."
msgstr ""
"`Pipfile` の ``[requires]`` セクションに対象としているPythonバージョンを指定してください。\n"
"Pipevnはデプロイツールなので、理想的にはPythonバージョンは1つだけにするべきです。"

#: ../../basics.rst:129
msgid ""
"``pipenv install`` is fully compatible with ``pip install`` syntax, for "
"which the full documentation can be found `here "
"<https://pip.pypa.io/en/stable/user_guide/#installing-packages>`_."
msgstr ""
"``pipenv install`` は ``pip install`` の文法と完全な互換性があります。 ``pip install`` "
"の文法については `ここ <https://pip.pypa.io/en/stable/user_guide/#installing-"
"packages>`_ に完全なドキュメントがあります。"

#: ../../basics.rst:134
msgid "☤ Example Pipenv Workflow"
msgstr "☤ Pipenvのワークフローの例"

#: ../../basics.rst:136
msgid "Clone / create project repository::"
msgstr "プロジェクトのレポジトリをクローンまたは作成する::"

#: ../../basics.rst:140
msgid "Install from Pipfile, if there is one::"
msgstr "Pipfileがあった場合には、Pipfileの内容でインストールする::"

#: ../../basics.rst:144
msgid "Or, add a package to your new project::"
msgstr "もしくは、新しいプロジェクトにパッケージを追加する::"

#: ../../basics.rst:148
msgid ""
"This will create a ``Pipfile`` if one doesn't exist. If one does exist, it "
"will automatically be edited with the new package you provided."
msgstr ""
"このコマンドは ``Pipfile`` が無ければ作成します。\n"
"既に存在していた場合は、引数で与えたパッケージが追加されるよう自動的に ``Pipfile`` を編集します。"

#: ../../basics.rst:150
msgid "Next, activate the Pipenv shell::"
msgstr "次に、Pipenvシェルを有効化する::"

#: ../../basics.rst:155
msgid ""
"This will spawn a new shell subprocess, which can be deactivated by using "
"``exit``."
msgstr "このコマンドは新しいシェルのサブプロセスを立ち上げます。このプロセスは ``exit`` を使って停止できます。"

#: ../../basics.rst:160
msgid "☤ Example Pipenv Upgrade Workflow"
msgstr "☤ Pipenvのアップグレードの流れの例"

#: ../../basics.rst:162
msgid "Find out what's changed upstream: ``$ pipenv update --outdated``."
msgstr "どれに変更があったかをコマンド ``$ pipenv update --outdated`` で調べます。"

#: ../../basics.rst:165
msgid "Upgrade packages, two options:"
msgstr "パッケージを更新します。方法は2つあります:"

#: ../../basics.rst:164
msgid "Want to upgrade everything? Just do ``$ pipenv update``."
msgstr ""
"全部のパッケージを更新したい?\n"
"それなら ``$ pipenv update`` とするだけです。"

#: ../../basics.rst:165
msgid ""
"Want to upgrade packages one-at-a-time? ``$ pipenv update <pkg>`` for each "
"outdated package."
msgstr ""
"一度に1つだけパッケージを更新したい?\n"
"パッケージごとに ``$ pipenv update <pkg>`` とします。"

#: ../../basics.rst:168
msgid "☤ Importing from requirements.txt"
msgstr "☤ requirements.txtからのインポート"

#: ../../basics.rst:170
msgid ""
"If you only have a ``requirements.txt`` file available when running ``pipenv"
" install``, pipenv will automatically import the contents of this file and "
"create a ``Pipfile`` for you."
msgstr ""
"``pipenv install`` を実行したときに ``requirements.txt`` "
"ファイルしか無い場合は、Pipenvは自動でそのファイルの内容をインポートし ``Pipfile`` を作成します。"

#: ../../basics.rst:173
msgid ""
"You can also specify ``$ pipenv install -r path/to/requirements.txt`` to "
"import a requirements file."
msgstr ""
"requirementsファイルをインポートするのに、 ``$ pipenv install -r path/to/requirements.txt``"
" と指定することもできます。"

#: ../../basics.rst:175
msgid ""
"If your requirements file has version numbers pinned, you'll likely want to "
"edit the new ``Pipfile`` to remove those, and let ``pipenv`` keep track of "
"pinning.  If you want to keep the pinned versions in your ``Pipfile.lock`` "
"for now, run ``pipenv lock --keep-outdated``.  Make sure to `upgrade "
"<#initialization>`_ soon!"
msgstr ""
"requirementsファイルでバージョン番号が固定されている場合は、新しく作成された ``Pipfile`` を編集して固定バージョンを取り除いた上で、 ``pipenv`` コマンドでは固定バージョンのままにしておきたいでしょう。\n"
"とりあえず今のところは固定バージョンを ``Pipfile.lock`` に保持しておきたい場合は、 ``pipenv lock --keep-outdated`` を実行してください。\n"
"すぐに `アップグレード <#initialization>`_ するのも忘れずに!"

#: ../../basics.rst:183
msgid "☤ Specifying Versions of a Package"
msgstr "☤ パッケージのバージョンを指定する"

#: ../../basics.rst:185
msgid ""
"You can specify versions of a package using the `Semantic Versioning scheme "
"<https://semver.org/>`_ (i.e. ``major.minor.micro``)."
msgstr ""
"`Semantic Versioning scheme <https://semver.org/>`_ （すなわち "
"``major.minor.micro``）を使用して、パッケージのバージョンを指定できます。"

#: ../../basics.rst:188
msgid "For example, to install requests you can use: ::"
msgstr "例えば、インストールリクエストで次の記法が使えます: ::"

#: ../../basics.rst:192
msgid ""
"Pipenv will install version ``1.2`` and any minor update, but not ``2.0``."
msgstr "Pipenvはバージョン ``1.2`` やそのマイナーアップデートをインストールしますが、``2.0`` はインストールしません。"

#: ../../basics.rst:194
msgid ""
"This will update your ``Pipfile`` to reflect this requirement, "
"automatically."
msgstr "このコマンドを実行することで、バージョン指定を反映するように ``Pipfile`` が自動で更新されます。"

#: ../../basics.rst:196
msgid ""
"In general, Pipenv uses the same specifier format as pip. However, note that"
" according to `PEP 440`_ , you can't use versions containing a hyphen or a "
"plus sign."
msgstr ""
"一般的には、Pipenvはpipと同じバージョン指定形式を使います。\n"
"しかし、 `PEP 440`_ によると、ハイフンやプラス記号を含んだバージョン名は使えないことに注意してください。"

#: ../../basics.rst:200
msgid "To make inclusive or exclusive version comparisons you can use: ::"
msgstr "境界を含む、あるいは含まないバージョン比較をするには、次の記法が使えます: ::"

#: ../../basics.rst:206
msgid ""
"The use of ``\" \"`` around the package and version specification is highly "
"recommended to avoid issues with `Input and output redirection "
"<https://robots.thoughtbot.com/input-output-redirection-in-the-shell>`_ in "
"Unix-based operating systems."
msgstr ""
"パッケージ名とバージョン指定部分を ``\" \"`` で囲って、Unix系のOSでの `入出力のリダイレクト "
"<https://robots.thoughtbot.com/input-output-redirection-in-the-shell>`_ "
"の問題を避けることを強く推奨します。"

#: ../../basics.rst:210
msgid ""
"The use of ``~=`` is preferred over the ``==`` identifier as the former "
"prevents pipenv from updating the packages:  ::"
msgstr ""
"``~=`` はPipenvがパッケージをアップデートするのを妨げるので、``==`` 識別子よりも ``~=`` 識別子を使う方が推奨されます。"

#: ../../basics.rst:214
msgid ""
"To avoid installing a specific version you can use the ``!=`` identifier."
msgstr "特定のバージョンのインストールを防ぐには ``!=`` 識別子が使えます。"

#: ../../basics.rst:216
msgid ""
"For an in depth explanation of the valid identifiers and more complex use "
"cases check `the relevant section of PEP-440`_."
msgstr "有効な識別子とより複雑な使用場面の深い説明は `the relevant section of PEP-440`_ を確認してください。"

#: ../../basics.rst:221
msgid "☤ Specifying Versions of Python"
msgstr "☤ Pythonのバージョンを指定する"

#: ../../basics.rst:223
msgid ""
"To create a new virtualenv, using a specific version of Python you have "
"installed (and on your ``PATH``), use the ``--python VERSION`` flag, like "
"so:"
msgstr ""
"インストール済みの (そして ``PATH`` 上にある) 特定のバージョンのPythonを使って、新しく仮想環境を作るには、 ``--python "
"VERSION`` フラグを次のように使います:"

#: ../../basics.rst:226
msgid "Use Python 3::"
msgstr "Python 3を使うには::"

#: ../../basics.rst:230
msgid "Use Python3.6::"
msgstr "Python 3.6を使うには::"

#: ../../basics.rst:234
msgid "Use Python 2.7.14::"
msgstr "Python 2.7.14を使うには::"

#: ../../basics.rst:238
msgid ""
"When given a Python version, like this, Pipenv will automatically scan your "
"system for a Python that matches that given version."
msgstr "このようにPythonのバージョンが与えられたときは、Pipenvはそのバージョンに合うPythonをシステムから自動で探しに行きます。"

#: ../../basics.rst:240
msgid ""
"If a ``Pipfile`` hasn't been created yet, one will be created for you, that "
"looks like this::"
msgstr "``Pipfile`` がまだ作成されていなかった場合は、次のような内容で作成されます::"

#: ../../basics.rst:253
msgid ""
"The inclusion of ``[requires] python_version = \"3.6\"`` specifies that your"
" application requires this version of Python, and will be used automatically"
" when running ``pipenv install`` against this ``Pipfile`` in the future "
"(e.g. on other machines). If this is not true, feel free to simply remove "
"this section."
msgstr ""
"``[requires] python_version = \"3.6\"`` という文言が含まれていると、アプリケーションがこのバージョンのPythonを要求していることを示し、将来 (例えば他のマシンで) この ``Pipfile`` に対して ``pipenv install`` を実行するときに自動で使われます。\n"
"この指定が間違っている場合は、気にせずこのセクションを削除してください。"

#: ../../basics.rst:257
msgid ""
"If you don't specify a Python version on the command–line, either the "
"``[requires]`` ``python_full_version`` or ``python_version`` will be "
"selected automatically, falling back to whatever your system's default "
"``python`` installation is, at time of execution."
msgstr ""
"コマンドラインでも ``[requires]`` でもPythonのバージョンを指定しなかった場合は、 ``python_full_version`` "
"や ``python_version`` は自動で選ばれ、システムのデフォルトとしてインストールされている ``python`` が実行時に選ばれます。"

#: ../../basics.rst:262
msgid "☤ Editable Dependencies (e.g. ``-e .`` )"
msgstr "☤ 編集可能な依存関係 (例えば ``-e .`` )"

#: ../../basics.rst:264
msgid ""
"You can tell Pipenv to install a path as editable — often this is useful for"
" the current working directory when working on packages::"
msgstr ""
"Pipenvに編集可能なパスとしてインストールするよう指示できます — "
"この機能は、パッケージの開発作業をしているときに、現在の作業ディレクトリを指すのに便利なことが多いです::"

#: ../../basics.rst:275
msgid ""
"All sub-dependencies will get added to the ``Pipfile.lock`` as well. Sub-"
"dependencies are **not** added to the ``Pipfile.lock`` if you leave the "
"``-e`` option out."
msgstr ""
"全ての子依存関係も ``Pipfile.lock`` に追加されます。\n"
"``-e`` オプションを設定しないでおくと、子依存関係は ``Pipfile.lock`` には追加され **ません**。"

#: ../../basics.rst:282
msgid "☤ Environment Management with Pipenv"
msgstr "☤ Pipenvによる環境管理"

#: ../../basics.rst:284
msgid ""
"The three primary commands you'll use in managing your pipenv environment "
"are ``$ pipenv install``, ``$ pipenv uninstall``, and ``$ pipenv lock``."
msgstr ""
"Pipenvの環境管理で使うであろう主要な3つのコマンドは ``$ pipenv install`` 、 ``$ pipenv uninstall`` "
"、 ``$ pipenv lock`` です。"

#: ../../basics.rst:290
msgid "$ pipenv install"
msgstr "$ pipenv install"

#: ../../basics.rst:292
msgid ""
"``$ pipenv install`` is used for installing packages into the pipenv virtual"
" environment and updating your Pipfile."
msgstr ""
"``$ pipenv install`` は、Pipenvの仮想環境にパッケージをインストールしたり、Pipfileを更新したりするのに使います。"

#: ../../basics.rst:295
msgid "Along with the basic install command, which takes the form::"
msgstr "次の形式の基本的なインストールコマンドと一緒に::"

#: ../../basics.rst:299
msgid "The user can provide these additional parameters:"
msgstr "ユーザーは以下の追加のパラメータを渡せます:"

#: ../../basics.rst:301
msgid ""
"``--two`` — Performs the installation in a virtualenv using the system "
"``python2`` link."
msgstr "``--two`` — システムのシンボリックリンク ``python2`` を使い、仮想環境へのインストールを行います。"

#: ../../basics.rst:302
msgid ""
"``--three`` — Performs the installation in a virtualenv using the system "
"``python3`` link."
msgstr "``--three`` — システムのシンボリックリンク ``python3`` を使い、仮想環境へのインストールを行います。"

#: ../../basics.rst:303
msgid ""
"``--python`` — Performs the installation in a virtualenv using the provided "
"Python interpreter."
msgstr "``--python`` — 引数で与えられたPythonインタプリタを使い、仮想環境へのインストールを行います。"

#: ../../basics.rst:305
msgid ""
"None of the above commands should be used together. They are also "
"**destructive** and will delete your current virtualenv before replacing it "
"with an appropriately versioned one."
msgstr ""
"上のコマンドは一緒に使ってはいけません。\n"
"これらのコマンドは *破壊的* であり、現在の仮想環境を削除してから、適切なバージョンが使われた仮想環境に置き換えられます。"

#: ../../basics.rst:309
msgid ""
"The virtualenv created by Pipenv may be different from what you were "
"expecting. Dangerous characters (i.e. ``$`!*@\"`` as well as space, line "
"feed, carriage return, and tab) are converted to underscores. Additionally, "
"the full path to the current folder is encoded into a \"slug value\" and "
"appended to ensure the virtualenv name is unique."
msgstr ""
"Pipenvで作成された仮想環境は、予想したものと異なっているかもしれません。\n"
"危険な文字 (つまり、空白、ラインフィード、キャリッジリターン、タブだけでなく ``$`!*@\"`` も) はアンダースコアに変換されます。\n"
"さらに、現在のフォルダのフルパスは \"スラッグ値\" にエンコードされ、仮想環境名が一意になるように末尾に追加されます。"

#: ../../basics.rst:315
msgid ""
"``--dev`` — Install both ``develop`` and ``default`` packages from "
"``Pipfile``."
msgstr ""
"``--dev`` — ``Pipfile`` の ``develop`` パッケージと ``default`` パッケージの両方をインストールします。"

#: ../../basics.rst:316
msgid ""
"``--system`` — Use the system ``pip`` command rather than the one from your "
"virtualenv."
msgstr "``--system`` — 仮想環境ではなく、システムの ``pip`` コマンドを使用します。"

#: ../../basics.rst:317
msgid ""
"``--ignore-pipfile`` — Ignore the ``Pipfile`` and install from the "
"``Pipfile.lock``."
msgstr ""
"``--ignore-pipfile`` — ``Pipfile`` を無視し、 ``Pipfile.lock`` を使ってインストールします。"

#: ../../basics.rst:318
msgid ""
"``--skip-lock`` — Ignore the ``Pipfile.lock`` and install from the "
"``Pipfile``. In addition, do not write out a ``Pipfile.lock`` reflecting "
"changes to the ``Pipfile``."
msgstr ""
"``--skip-lock`` — ``Pipfile.lock`` を無視し、 ``Pipfile`` を使ってインストールします。\n"
"それに加えて、 ``Pipfile`` の変更部分を ``Pipfile.lock`` へは反映しません。"

#: ../../basics.rst:323
msgid "$ pipenv uninstall"
msgstr "$ pipenv uninstall"

#: ../../basics.rst:325
msgid ""
"``$ pipenv uninstall`` supports all of the parameters in `pipenv install "
"<#pipenv-install>`_, as well as two additional options, ``--all`` and "
"``--all-dev``."
msgstr ""
"``$ pipenv uninstall`` は `pipenv install <#pipenv-install>`_ の全てのパラメータに加えて、 "
"``--all`` と ``--all-dev`` もサポートしています。"

#: ../../basics.rst:328
msgid ""
"``--all`` — This parameter will purge all files from the virtual "
"environment, but leave the Pipfile untouched."
msgstr "``--all`` — このパラメータを付けると、仮想環境から全てのファイルを除去しますが、Pipfileだけは触らずに残します。"

#: ../../basics.rst:331
msgid ""
"``--all-dev`` — This parameter will remove all of the development packages "
"from the virtual environment, and remove them from the Pipfile."
msgstr "``--all-dev`` — このパラメータを付けると、開発環境の全てのパッケージを仮想環境から除去し、Pipfileからも削除します。"

#: ../../basics.rst:338
msgid "$ pipenv lock"
msgstr "$ pipenv lock"

#: ../../basics.rst:340
msgid ""
"``$ pipenv lock`` is used to create a ``Pipfile.lock``, which declares "
"**all** dependencies (and sub-dependencies) of your project, their latest "
"available versions, and the current hashes for the downloaded files. This "
"ensures repeatable, and most importantly *deterministic*, builds."
msgstr ""
"``$ pipenv lock`` は ``Pipfile.lock`` を作成するために使用します。\n"
"このファイルにはプロジェクトの *全ての* 依存パッケージ (とさらにその依存パッケージ) と、それらの利用可能な最新のバージョン、ダウンロード済みのファイルの現在のハッシュが宣言されています。\n"
"このファイルのおかげで、繰り返し可能かつ、最も重要な機能である *決定論的な* ビルドが保証されています。"

#: ../../basics.rst:343
msgid "☤ About Shell Configuration"
msgstr "☤ シェルの設定について"

#: ../../basics.rst:345
msgid ""
"Shells are typically misconfigured for subshell use, so ``$ pipenv shell "
"--fancy`` may produce unexpected results. If this is the case, try ``$ "
"pipenv shell``, which uses \"compatibility mode\", and will attempt to spawn"
" a subshell despite misconfiguration."
msgstr ""
"シェルはたいていサブシェルを使うのに間違った設定になっていることがあるので、 ``$ pipenv shell --fancy`` は予期せぬ状態を引き起こすかもしれません。\n"
"その場合は、 ``$ pipenv shell`` を試してみてください。\n"
"これは \"互換モード\" を使っていて、間違った設定がされていてもサブシェルを起動しようと試みます。"

#: ../../basics.rst:347
msgid ""
"A proper shell configuration only sets environment variables like ``PATH`` "
"during a login session, not during every subshell spawn (as they are "
"typically configured to do). In fish, this looks like this::"
msgstr ""
"適切なシェル設定では、(たいていはこの設定になっていますが) 全てのサブシェルが起動している間ではなく、あるログインセッションが起動している間だけ ``PATH`` のような環境変数を設定します。\n"
"fishでは、適切な設定は次のようになります::"

#: ../../basics.rst:353
msgid ""
"You should do this for your shell too, in your ``~/.profile`` or "
"``~/.bashrc`` or wherever appropriate."
msgstr "各自のシェルに対して、 ``~/.profile`` や ``~/.bashrc`` などの適切なファイルで同様の設定をしてください。"

#: ../../basics.rst:355
msgid ""
"The shell launched in interactive mode. This means that if your shell reads "
"its configuration from a specific file for interactive mode (e.g. bash by "
"default looks for a ``~/.bashrc`` configuration file for interactive mode), "
"then you'll need to modify (or create) this file."
msgstr ""
"シェルは対話モードで起動します。\n"
"つまり、シェルが対話モード用の設定をあるファイルから読み込む (例えば、bashはデフォルトで対話モード用の設定ファイル ``~/.bashrc`` を探しに行きます) 場合は、その設定ファイルを編集 (もしくは作成) する必要があります。"

#: ../../basics.rst:357
msgid ""
"If you experience issues with ``$ pipenv shell``, just check the "
"``PIPENV_SHELL`` environment variable, which ``$ pipenv shell`` will use if "
"available. For detail, see :ref:`configuration-with-environment-variables`."
msgstr ""
"``$ pipenv shell`` の問題に遭遇した場合は、まずは ``PIPENV_SHELL`` 環境変数を確認してください。``$ pipenv shell`` は使用可能な場合に、この環境変数を利用します。\n"
"詳しくは、:ref:`configuration-with-environment-variables` を参照してください。"

#: ../../basics.rst:360
msgid "☤ A Note about VCS Dependencies"
msgstr "☤ バージョン管理システムについての但し書き"

#: ../../basics.rst:362
msgid ""
"You can install packages with pipenv from git and other version control "
"systems using URLs formatted according to the following rule::"
msgstr "pipenvは、gitやその他のバージョン管理システムで次の規則に従った形式のURLを使っているものからパッケージをインストールできます。"

#: ../../basics.rst:366
msgid ""
"The only optional section is the ``@<branch_or_tag>`` section.  When using "
"git over SSH, you may use the shorthand vcs and scheme alias "
"``git+git@<location>:<user_or_organization>/<repository>@<branch_or_tag>#<package_name>``."
" Note that this is translated to ``git+ssh://git@<location>`` when parsed."
msgstr ""

#: ../../basics.rst:368
msgid ""
"Note that it is **strongly recommended** that you install any version-"
"controlled dependencies in editable mode, using ``pipenv install -e``, in "
"order to ensure that dependency resolution can be performed with an up to "
"date copy of the repository each time it is performed, and that it includes "
"all known dependencies."
msgstr ""

#: ../../basics.rst:370
msgid ""
"Below is an example usage which installs the git repository located at "
"``https://github.com/requests/requests.git`` from tag ``v2.20.1`` as package"
" name ``requests``::"
msgstr ""

#: ../../basics.rst:383
msgid ""
"Valid values for ``<vcs_type>`` include ``git``, ``bzr``, ``svn``, and "
"``hg``.  Valid values for ``<scheme>`` include ``http``, ``https``, ``ssh``,"
" and ``file``.  In specific cases you also have access to other schemes: "
"``svn`` may be combined with ``svn`` as a scheme, and ``bzr`` can be "
"combined with ``sftp`` and ``lp``."
msgstr ""

#: ../../basics.rst:385
msgid ""
"You can read more about pip's implementation of VCS support `here "
"<https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support>`_. For "
"more information about other options available when specifying VCS "
"dependencies, please check the `Pipfile spec "
"<https://github.com/pypa/pipfile>`_."
msgstr ""

#: ../../basics.rst:389
msgid "☤ Pipfile.lock Security Features"
msgstr "☤ セキュリティ機能 Pipfile.lock"

#: ../../basics.rst:391
msgid ""
"``Pipfile.lock`` takes advantage of some great new security improvements in "
"``pip``. By default, the ``Pipfile.lock`` will be generated with the sha256 "
"hashes of each downloaded package. This will allow ``pip`` to guarantee "
"you're installing what you intend to when on a compromised network, or "
"downloading dependencies from an untrusted PyPI endpoint."
msgstr ""
"``Pipfile.lock`` は ``pip`` に新しく入った偉大なセキュリティ上の改善を利用します。\n"
"デフォルトでは、 ``Pipfile.lock`` はダウンロードされたパッケージごとのsha256ハッシュから生成されます。\n"
"これにより ``pip`` は、ネットワークが驚異に晒されていたり、信頼できないPyPIエンドポイントから依存パッケージをインストールしたりしているときに、意図したとおりのパッケージをインストールしていることを保証できます。"

#: ../../basics.rst:396
msgid ""
"We highly recommend approaching deployments with promoting projects from a "
"development environment into production. You can use ``pipenv lock`` to "
"compile your dependencies on your development environment and deploy the "
"compiled ``Pipfile.lock`` to all of your production environments for "
"reproducible builds."
msgstr ""
"開発環境から本番環境へプロジェクトを昇格させる方法でデプロイに取り組むことを強く推奨します。\n"
"``pipenv lock`` を使って開発環境の依存関係をコンパイルし、そのコンパイルされた ``Pipfile.lock`` を全ての本番環境にデプロイして再現可能なビルドができます。"
