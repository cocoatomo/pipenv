# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 8.2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-10-17 13:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: cocoatomo <cocoatomo77@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/cocoatomo/teams/78708/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../install.rst:4
msgid "Pipenv & Virtual Environments"
msgstr "pipenvと仮想環境"

#: ../../install.rst:8
msgid "This tutorial walks you through installing and using Python packages."
msgstr "このチュートリアルでは、Pythonのパッケージをインストールして使う体験をしてもらいます。"

#: ../../install.rst:10
msgid ""
"It will show you how to install and use the necessary tools and make strong "
"recommendations on best practices. Keep in mind that Python is used for a "
"great many different purposes, and precisely how you want to manage your "
"dependencies may change based on how you decide to publish your software. "
"The guidance presented here is most directly applicable to the development "
"and deployment of network services (including web applications), but is also"
" very well suited to managing development and testing environments for any "
"kind of project."
msgstr ""
"このチュートリアルは必要とするツールをインストールして使う方法を解説し、ベストプラクティスを強く推奨するものです。\n"
"Pythonは非常に多岐に渡る目的に使われていて、依存関係をどのように管理したいかは厳密には、どのようにソフトウェアの公開を決めるかによって変わるかもしれないことを心に留めておいてください。\n"
"このガイダンスを直接適用するのに一番向いているのは、(Webアプリケーションを含む) ネットワークサービスの開発とデプロイですが、どんな種類のプロジェクトの開発環境やテスト環境の管理にも非常によく適したものになっています。"

#: ../../install.rst:18
msgid ""
"This guide is written for Python 3, however, these instructions should work "
"fine on Python 2.7—if you are still using it, for some reason."
msgstr ""
"このガイドはPython 3向けに書かれていますが、とある理由でまだPython 2.7を使っている場合でも、それぞれの指示はきちんと動くでしょう。"

#: ../../install.rst:23
msgid "☤  Make sure you've got Python & pip"
msgstr "☤  Pythonとpipがあるかの確認"

#: ../../install.rst:25
msgid ""
"Before you go any further, make sure you have Python and that it's available"
" from your command line. You can check this by simply running:"
msgstr ""
"先に進む前に、Pythonがインストールしてあって、コマンドラインから使えることを確認してください。\n"
"次のコマンドを実行して確認できます:"

#: ../../install.rst:32
msgid ""
"You should get some output like ``3.6.2``. If you do not have Python, please"
" install the latest 3.x version from `python.org`_ or refer to the "
"`Installing Python`_ section of *The Hitchhiker's Guide to Python*."
msgstr ""
"``3.6.2`` のような表示が出力されたと思います。\n"
"もしPythonをインストールしていなかったら、 `python.org`_ から最新のバージョン3.xをインストールするか、 *The Hitchhiker's Guide to Python* の `Installing Python`_ 節を参照してください。"

#: ../../install.rst:36
msgid "If you're newcomer and you get an error like this:"
msgstr "もしあなたが初心者で次のようなエラーが出てしまったら:"

#: ../../install.rst:45
msgid ""
"It's because this command is intended to be run in a *shell* (also called a "
"*terminal* or *console*). See the Python for Beginners `getting started "
"tutorial`_ for an introduction to using your operating system's shell and "
"interacting with Python."
msgstr ""
"このエラーが起きたのは、 ``python`` コマンドは *シェル* (*ターミナル* や *コンソール* とも呼ばれます) で動かすものだからです。\n"
"Python for Beginnersというサイトの `getting started tutorial`_ を参照し、OSのシェルの使い方やPythonとやり取りする入門をしてください。"

#: ../../install.rst:50
msgid ""
"Additionally, you'll need to make sure you have :ref:`pip` available. You "
"can check this by running:"
msgstr ""
"さらに、 :ref:`pip` が使える状態にあるかを確認する必要があります。\n"
"次のコマンドを実行して確認できます:"

#: ../../install.rst:58
msgid ""
"If you installed Python from source, with an installer from `python.org`_, "
"or via `Homebrew`_ you should already have pip. If you're on Linux and "
"installed using your OS package manager, you may have to `install pip "
"<https://pip.pypa.io/en/stable/installing/>`_ separately."
msgstr ""
"ソースコードや `python.org`_ のインストーラーや  `Homebrew`_ からPythonをインストールした場合は、既にpipがインストールされているはずです。\n"
"Linuxを使っていて、OSのパッケージマネージャーを使ってインストールした場合には、それとは別に `pipのインストール <https://pip.pypa.io/en/stable/installing/>`_ をしなければならないかもしれません。"

#: ../../install.rst:69
msgid "☤ Installing Pipenv"
msgstr "☤ Pipenvのインストール"

#: ../../install.rst:71
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit "
"to those tools. While :ref:`pip` can install Python packages, Pipenv is "
"recommended as it's a higher-level tool that simplifies dependency "
"management for common use cases."
msgstr ""
":ref:`Pipenv` はPythonプロジェクトのための依存関係管理ツールです。\n"
"もしNode.jsの `npm`_ やRubyの `bundler`_ に馴染みがあるなら、Pipenvはそれらのツールとやりたいことはよく似ています。\n"
":ref:`pip` はPythonのパッケージをインストールできますが、Pipenvは通常のユースケースでの依存関係管理を簡単にするより高度なツールとして推奨されています。"

#: ../../install.rst:77
msgid "Use ``pip`` to install Pipenv:"
msgstr "次の通り ``pip`` でPipenvをインストールしてください:"

#: ../../install.rst:85
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation, "
"you'll need to add the `user base`_'s binary directory to your ``PATH``."
msgstr ""

#: ../../install.rst:89
msgid ""
"On Linux and macOS you can find the user base binary directory by running "
"``python -m site --user-base`` and adding ``bin`` to the end. For example, "
"this will typically print ``~/.local`` (with ``~`` expanded to the absolute "
"path to your home directory) so you'll need to add ``~/.local/bin`` to your "
"``PATH``. You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""

#: ../../install.rst:96
msgid ""
"On Windows you can find the user base binary directory by running ``py -m "
"site --user-site`` and replacing ``site-packages`` with ``Scripts``. For "
"example, this could return ``C:\\Users\\Username\\AppData\\Roaming\\Python36"
"\\site-packages`` so you would need to set your ``PATH`` to include "
"``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set "
"your user ``PATH`` permanently in the `Control Panel`_. You may need to log "
"out for the ``PATH`` changes to take effect."
msgstr ""

#: ../../install.rst:113
msgid "☤ Installing packages for your project"
msgstr "☤ プロジェクトで使うパッケージのインストール"

#: ../../install.rst:115
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this "
"tutorial) and run:"
msgstr ""
"Pipenvはプロジェクトごとに依存関係を管理します。\n"
"パッケージをインストールするには、プロジェクトのディレクトリ (もしくは、このチュートリアル用の空ディレクトリ) に移動して、次のコマンドを実行してください:"

#: ../../install.rst:124
msgid ""
"Pipenv will install the excellent `Requests`_ library and create a "
"``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used "
"to track which dependencies your project needs in case you need to re-"
"install them, such as when you share your project with others. You should "
"get output similar to this (although the exact paths shown will vary):"
msgstr ""
"Pipenvは非常に優れた `Requests`_ ライブラリをインストールし、プロジェクトディレクトリに ``Pipfile`` を作成します。\n"
":ref:`Pipfile` は、プロジェクトを他の人に共有するときのように、依存関係を再インストールする必要が出てきたときに、プロジェクトがどの依存関係を必要としているのかを追跡するのに使います。\n"
"これに似た出力が表示されるはずです (もっとも、表示されている正確なパスは異なるでしょう):"

#: ../../install.rst:161
msgid "☤ Using installed packages"
msgstr "☤ インストールされたパッケージを使う"

#: ../../install.rst:163
msgid ""
"Now that Requests is installed you can create a simple ``main.py`` file to "
"use it:"
msgstr "これでRequestsがインストールされたので、単純な ``main.py`` ファイルを作成し、Requestsを使えます:"

#: ../../install.rst:174
msgid "Then you can run this script using ``pipenv run``:"
msgstr "そして ``pipenv run`` を使って、このスクリプトが実行できます:"

#: ../../install.rst:180
msgid "You should get output similar to this:"
msgstr "これに似た出力が表示されるはずです:"

#: ../../install.rst:186
msgid ""
"Using ``$ pipenv run`` ensures that your installed packages are available to"
" your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``$ pipenv shell``."
msgstr ""
"``$ pipenv run`` を使うと、インストールしたパッケージがスクリプトから使えることが保証されます。\n"
"インストールしたパッケージに全てのコマンドがアクセスできることが保証された新しいシェルの起動もできます。"

#: ../../install.rst:192
msgid "☤ Next steps"
msgstr "☤ 次のステップ"

#: ../../install.rst:194
msgid ""
"Congratulations, you now know how to install and use Python packages! ✨ 🍰 ✨"
msgstr "おめでとうございます、Pythonのパッケージをインストールして使う方法が学べました! ✨ 🍰 ✨"

#: ../../install.rst:199
msgid "☤ Fancy Installation of Pipenv"
msgstr "☤ pipenvの高機能なインストール方法"

#: ../../install.rst:201
msgid ""
"To install pipenv in a fancy way, we recommend using `pipsi "
"<https://github.com/mitsuhiko/pipsi>`_."
msgstr ""
"高機能な方法でpipenvをインストールするには、 `pipsi <https://github.com/mitsuhiko/pipsi>`_ "
"をオススメします。"

#: ../../install.rst:203
msgid ""
"Pipsi is a powerful tool which allows you to install Python scripts into "
"isolated virtual environments."
msgstr "pipsiは、Pythonスクリプトを隔離された仮想環境にインストールできるようにする強力なツールです。"

#: ../../install.rst:205
msgid "To install pipsi, first run this::"
msgstr "pipsiをインストールするには、まずこれを実行します::"

#: ../../install.rst:209
msgid "Follow the instructions, you'll have to update your ``PATH``."
msgstr "指示に従って ``PATH`` を更新する必要があります。"

#: ../../install.rst:211
msgid "Then, simply run::"
msgstr "そして、次のコマンドを実行します::"

#: ../../install.rst:216 ../../install.rst:239
msgid "To upgrade pipenv at any time::"
msgstr "いつでもpipenvをアップグレードするには次のコマンドを実行します::"

#: ../../install.rst:221
msgid ""
"This will install both ``pipenv`` and ``pew`` (one of our dependencies) in "
"an isolated virtualenv, so it doesn't interfere with the rest of your Python"
" installation!"
msgstr ""
"これは ``pipenv`` と (依存ライブラリの1つである) ``pew`` "
"を隔離された仮想環境にインストールするので、他のインストールされているPython環境に干渉することはありません。"

#: ../../install.rst:227
msgid "☤ Pragmatic Installation of Pipenv"
msgstr "☤ pipenvの実用的なインストール方法"

#: ../../install.rst:229
msgid ""
"If you have a working installation of pip, and maintain certain "
"\"toolchain\" type Python modules as global utilities in your user "
"environment, pip `user installs <https://pip.pypa.io/en/stable/user_guide"
"/#user-installs>`_ allow for installation into your home directory. Note "
"that due to interaction between dependencies, you should limit tools "
"installed in this way to basic building blocks for a Python workflow like "
"virtualenv, pipenv, tox, and similar software."
msgstr ""
"もしインストールされた今も使っているpipがあって、ある \"ツール群\" タイプのPythonモジュールをどの環境でも使うユーティリティとしてメンテナンスしている場合は、pip の `ユーザーインストール <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を使うとホームディレクトリにインストールできます。\n"
"依存関係どうしの影響の関係で、この方法でインストールするツールは、virtualenv、pipenv、toxのようなPythonを使う作業の工程のための基本要素となるソフトウェアだけに制限すべきという点に注意してください。"

#: ../../install.rst:231
msgid "To install::"
msgstr "次のコマンドでインストールします:"

#: ../../install.rst:235
msgid ""
"For more information see the `user installs documentation "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_, but to add the "
"installed cli tools from a pip user install to your path, add the output "
"of::"
msgstr ""
"さらに詳しいことは `ユーザーインストールの説明 <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を参照してください。\n"
"pipのユーザーインストールでインストールしたCLIツールをパスに追加するには、次のコマンドで出力されるディレクトリを追加してください::"

#: ../../install.rst:246
msgid "☤ Crude Installation of Pipenv"
msgstr "☤ 大雑把なpipenvのインストール方法"

#: ../../install.rst:248
msgid ""
"If you don't even have pip installed, you can use this crude installation "
"method, which will bootstrap your whole system::"
msgstr "もしpipをまだインストールしていなくても、この大雑把なインストール方法を使って、pipenvのシステム全体を立ち上げられます::"

#: ../../install.rst:252
msgid "Congratulations, you now have pip and Pipenv installed!"
msgstr "おめでとう、これでpipとPipenvがインストールされました!"
