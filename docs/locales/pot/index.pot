# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 7.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-19 09:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../index.rst:7
msgid "Pipenv: Sacred Marriage of Pipfile, Pip, & Virtualenv"
msgstr ""

#: ../../index.rst:29
msgid "**Pipenv** — the officially recommended Python packaging tool from `Python.org <https://packaging.python.org/new-tutorials/installing-and-using-packages/>`_, free (as in freedom)."
msgstr ""

#: ../../index.rst:31
msgid "Pipenv is a project that aims to bring the best of all packaging worlds to the Python world. It harnesses `Pipfile <https://github.com/pypa/pipfile>`_, `pip <https://github.com/pypa/pip>`_, and `virtualenv <https://github.com/pypa/virtualenv>`_ into one single toolchain. It features very pretty terminal colors. *Windows is a first–class citizen, in our world.*"
msgstr ""

#: ../../index.rst:33
msgid "It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your ``Pipfile`` as you install/uninstall packages. The ``lock`` command generates a lockfile (``Pipfile.lock``)."
msgstr ""

#: ../../index.rst:40
msgid "The problems that Pipenv seeks to solve are multi-faceted:"
msgstr ""

#: ../../index.rst:42
msgid "When using Pipenv, you no longer need to use ``pip`` and ``virtualenv`` separately. They work together."
msgstr ""

#: ../../index.rst:43
msgid "Managing a ``requirements.txt`` file `can be problematic <https://www.kennethreitz.org/essays/a-better-pip-workflow>`_, so Pipenv uses the upcoming ``Pipfile`` and ``Pipfile.lock`` instead, which is superior for basic use cases."
msgstr ""

#: ../../index.rst:44
msgid "Hashes are used everywhere, always. Security."
msgstr ""

#: ../../index.rst:48
msgid "Install Pipenv Today!"
msgstr ""

#: ../../index.rst:55
msgid "If you have excellent taste, there's also a  `fancy installation method <http://docs.pipenv.org/en/latest/advanced.html#fancy-installation-of-pipenv>`_."
msgstr ""

#: ../../index.rst:63
msgid "User Testimonials"
msgstr ""

#: ../../index.rst:66
msgid "**Jannis Leidel**, former pip maintainer—"
msgstr ""

#: ../../index.rst:66
msgid "*Pipenv is the porcelain I always wanted to build for pip. It fits my brain and mostly replaces virtualenvwrapper and manual pip calls for me. Use it.*"
msgstr ""

#: ../../index.rst:69
msgid "**Jhon Crypt**—"
msgstr ""

#: ../../index.rst:69
msgid "*Pipenv is the best thing since pip, thank you!*"
msgstr ""

#: ../../index.rst:72
msgid "**Isaac Sanders**—"
msgstr ""

#: ../../index.rst:72
msgid "*Pipenv is literally the best thing about my day today. Thanks, Kenneth!*"
msgstr ""

#: ../../index.rst:75
msgid "☤ Pipenv Features"
msgstr ""

#: ../../index.rst:77
msgid "Enables truly *deterministic builds*, while easily specifying *what you want*."
msgstr ""

#: ../../index.rst:78
msgid "Automatically generates and checks file hashes for locked dependencies."
msgstr ""

#: ../../index.rst:79
msgid "Automatically finds your project home, recursively, by looking for a ``Pipfile``."
msgstr ""

#: ../../index.rst:80
msgid "Automatically generates a ``Pipfile``, if one doesn't exist."
msgstr ""

#: ../../index.rst:81
msgid "Automatically generates a ``Pipfile.lock``, if one doesn't exist."
msgstr ""

#: ../../index.rst:82
msgid "Automatically creates a virtualenv in a standard location."
msgstr ""

#: ../../index.rst:83
msgid "Automatically adds packages to a Pipfile when they are installed."
msgstr ""

#: ../../index.rst:84
msgid "Automatically removes packages from a Pipfile when they are un-installed."
msgstr ""

#: ../../index.rst:85
msgid "Also automatically updates pip and itself, when asked."
msgstr ""

#: ../../index.rst:87
msgid "The main commands are ``install``, ``uninstall``, and ``lock``, which generates a ``Pipfile.lock``. These are intended to replace ``$ pip install`` usage, as well as manual virtualenv management (to activate a virtualenv, run ``$ pipenv shell``)."
msgstr ""

#: ../../index.rst:90
msgid "Basic Concepts"
msgstr ""

#: ../../index.rst:92
msgid "A virtualenv will automatically be created, when one doesn't exist."
msgstr ""

#: ../../index.rst:93
msgid "When no parameters are passed to ``install``, all packages ``[packages]`` specified will be installed."
msgstr ""

#: ../../index.rst:94
msgid "To initialize a Python 3 virtual environment, run ``$ pipenv --three``."
msgstr ""

#: ../../index.rst:95
msgid "To initialize a Python 2 virtual environment, run ``$ pipenv --two``."
msgstr ""

#: ../../index.rst:96
msgid "Otherwise, whatever virtualenv defaults to will be the default."
msgstr ""

#: ../../index.rst:101
msgid "Other Commands"
msgstr ""

#: ../../index.rst:103
msgid "``graph`` will show you a dependency graph, of your installed dependencies."
msgstr ""

#: ../../index.rst:104
msgid "``shell`` will spawn a shell with the virtualenv activated."
msgstr ""

#: ../../index.rst:105
msgid "``run`` will run a given command from the virtualenv, with any arguments forwarded (e.g. ``$ pipenv run python``)."
msgstr ""

#: ../../index.rst:106
msgid "``check`` asserts that PEP 508 requirements are being met by the current environment."
msgstr ""

#: ../../index.rst:110
msgid "Further Documentation Guides"
msgstr ""

#: ../../index.rst:119
msgid "☤ Pipenv Usage"
msgstr ""

#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
msgid "Options"
msgstr ""

#: ../../../pipenv:1
msgid "Update Pipenv & pip to latest."
msgstr ""

#: ../../../pipenv:1
msgid "Output project home information."
msgstr ""

#: ../../../pipenv:1
msgid "Output virtualenv information."
msgstr ""

#: ../../../pipenv:1
msgid "Remove the virtualenv."
msgstr ""

#: ../../../pipenv:1
#: ../../../pipenv graph:1
#: ../../../pipenv update:1
msgid "Minimal output."
msgstr ""

#: ../../../pipenv:1
#: ../../../pipenv check:1
#: ../../../pipenv install:1
#: ../../../pipenv lock:1
#: ../../../pipenv run:1
#: ../../../pipenv shell:1
#: ../../../pipenv uninstall:1
#: ../../../pipenv update:1
msgid "Use Python 3/2 when creating virtualenv."
msgstr ""

#: ../../../pipenv:1
#: ../../../pipenv check:1
#: ../../../pipenv install:1
#: ../../../pipenv lock:1
#: ../../../pipenv run:1
#: ../../../pipenv shell:1
#: ../../../pipenv uninstall:1
#: ../../../pipenv update:1
msgid "Specify which version of Python virtualenv should use."
msgstr ""

#: ../../../pipenv:1
msgid "Show this message then exit."
msgstr ""

#: ../../../pipenv:1
msgid "An easter egg, effectively."
msgstr ""

#: ../../../pipenv:1
msgid "Show the version and exit."
msgstr ""

#: ../../../pipenv check:1
msgid "Checks PEP 508 markers provided in Pipfile."
msgstr ""

#: ../../../pipenv graph:1
msgid "Displays currently–installed dependency graph information."
msgstr ""

#: ../../../pipenv install:1
msgid "Installs provided packages and adds them to Pipfile, or (if none is given), installs all packages."
msgstr ""

#: ../../../pipenv install:1
msgid "Install package(s) in [dev-packages]."
msgstr ""

#: ../../../pipenv install:1
#: ../../../pipenv uninstall:1
msgid "System pip management."
msgstr ""

#: ../../../pipenv install:1
msgid "Import a requirements.txt file."
msgstr ""

#: ../../../pipenv install:1
#: ../../../pipenv lock:1
#: ../../../pipenv uninstall:1
#: ../../../pipenv update:1
msgid "Verbose mode."
msgstr ""

#: ../../../pipenv install:1
msgid "Ignore Pipfile when installing, using the Pipfile.lock."
msgstr ""

#: ../../../pipenv install:1
msgid "Ignore locking mechanisms when installing—use the Pipfile, instead."
msgstr ""

#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
#: ../../index.rst:0
msgid "Arguments"
msgstr ""

#: ../../../pipenv install:1
#: ../../../pipenv uninstall:1
msgid "Optional argument"
msgstr ""

#: ../../../pipenv install:1
#: ../../../pipenv run:1
#: ../../../pipenv shell:1
#: ../../../pipenv uninstall:1
msgid "Optional argument(s)"
msgstr ""

#: ../../../pipenv lock:1
msgid "Generates Pipfile.lock."
msgstr ""

#: ../../../pipenv lock:1
msgid "Generate output compatible with requirements.txt."
msgstr ""

#: ../../../pipenv lock:1
#: ../../../pipenv update:1
msgid "Clear the dependency cache."
msgstr ""

#: ../../../pipenv run:1
msgid "Spawns a command installed into the virtualenv."
msgstr ""

#: ../../../pipenv run:1
msgid "Required argument"
msgstr ""

#: ../../../pipenv shell:1
msgid "Spawns a shell within the virtualenv."
msgstr ""

#: ../../../pipenv shell:1
msgid "Run in shell compatibility mode (for misconfigured shells)."
msgstr ""

#: ../../../pipenv shell:1
msgid "Always spawn a subshell, even if one is already spawned."
msgstr ""

#: ../../../pipenv uninstall:1
msgid "Un-installs a provided package and removes it from Pipfile."
msgstr ""

#: ../../../pipenv uninstall:1
msgid "Lock afterwards."
msgstr ""

#: ../../../pipenv uninstall:1
msgid "Un-install all package from [dev-packages]."
msgstr ""

#: ../../../pipenv uninstall:1
msgid "Purge all package(s) from virtualenv. Does not edit Pipfile."
msgstr ""

#: ../../../pipenv update:1
msgid "Updates Pipenv & pip to latest, uninstalls all packages, and re-installs package(s) in [packages] to latest compatible versions."
msgstr ""

#: ../../../pipenv update:1
msgid "Additionally install package(s) in [dev-packages]."
msgstr ""

#: ../../../pipenv update:1
msgid "Just output outdated packages."
msgstr ""

#: ../../index.rst:126
msgid "Indices and tables"
msgstr ""

#: ../../index.rst:128
msgid ":ref:`genindex`"
msgstr ""

#: ../../index.rst:129
msgid ":ref:`modindex`"
msgstr ""

#: ../../index.rst:130
msgid ":ref:`search`"
msgstr ""

