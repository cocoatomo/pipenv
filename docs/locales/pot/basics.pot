# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 7.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-19 09:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../basics.rst:4
msgid "Pipenv & Virtual Environments"
msgstr ""

#: ../../basics.rst:8
msgid "This tutorial walks you through installing and using Python packages."
msgstr ""

#: ../../basics.rst:10
msgid "It will show you how to install and use the necessary tools and make strong recommendations on best practices. Keep in mind that Python is used for a great many different purposes, and precisely how you want to manage your dependencies may change based on how you decide to publish your software. The guidance presented here is most directly applicable to the development and deployment of network services (including web applications), but is also very well suited to managing development and testing environments for any kind of project."
msgstr ""

#: ../../basics.rst:18
msgid "This guide is written for Python 3, however, these instructions should work fine on Python 2.7‚Äîif you are still using it, for some reason."
msgstr ""

#: ../../basics.rst:23
msgid "‚ò§  Make sure you've got Python & pip"
msgstr ""

#: ../../basics.rst:25
msgid "Before you go any further, make sure you have Python and that it's avalable from your command line. You can check this by simply running:"
msgstr ""

#: ../../basics.rst:32
msgid "You should get some output like ``3.6.2``. If you do not have Python, please install the latest 3.x version from `python.org`_ or refer to the `Installing Python`_ section of *The Hitchhiker's Guide to Python*."
msgstr ""

#: ../../basics.rst:36
msgid "If you're newcomer and you get an error like this:"
msgstr ""

#: ../../basics.rst:45
msgid "It's because this command is intended to be run in a *shell* (also called a *terminal* or *console*). See the Python for Beginners `getting started tutorial`_ for an introduction to using your operating system's shell and interacting with Python."
msgstr ""

#: ../../basics.rst:50
msgid "Additionally, you'll need to make sure you have :ref:`pip` available. You can check this by running:"
msgstr ""

#: ../../basics.rst:57
msgid "If you installed Python from source, with an installer from `python.org`_, or via `Homebrew`_ you should already have pip. If you're on Linux and installed using your OS package manager, you may have to `install pip <https://pip.pypa.io/en/stable/installing/>`_ separately."
msgstr ""

#: ../../basics.rst:68
msgid "‚ò§ Installing Pipenv"
msgstr ""

#: ../../basics.rst:70
msgid ":ref:`Pipenv` is a dependency manager for Python projects. If you're familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit to those tools. While :ref:`pip` can install Python packages, Pipenv is recommended as it's a higher-level tool that simplifies dependency management for common use cases."
msgstr ""

#: ../../basics.rst:76
msgid "Use ``pip`` to install Pipenv:"
msgstr ""

#: ../../basics.rst:83
msgid "This does a `user installation`_ to prevent breaking any system-wide packages. If ``pipenv`` isn't available in your shell after installation, you'll need to add the `user base`_'s ``bin`` directory to your ``PATH``. You can find the user base by running ``python -m site`` which will print site information including the user base. For example, on Linux this will return ``USER_BASE: '~/.local'`` so you'll need to add ``~/.local/bin`` to your ``PATH``. On Linux and macOS you can set your ``PATH`` permanently by `modifying ~/.profile`_. On Windows you can set the user ``PATH`` permanently in the `Control Panel`_."
msgstr ""

#: ../../basics.rst:101
msgid "‚ò§ Installing packages for your project"
msgstr ""

#: ../../basics.rst:103
msgid "Pipenv manages dependencies on a per-project basis. To install packages, change into your project's directory (or just an empty directory for this tutorial) and run:"
msgstr ""

#: ../../basics.rst:112
msgid "Pipenv will install the excellent `Requests`_ library and create a ``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary):"
msgstr ""

#: ../../basics.rst:149
msgid "‚ò§ Using installed packages"
msgstr ""

#: ../../basics.rst:151
msgid "Now that Requests is installed you can create a simple ``main.py`` file to use it:"
msgstr ""

#: ../../basics.rst:162
msgid "Then you can run this script using ``pipenv run``:"
msgstr ""

#: ../../basics.rst:168
msgid "You should get output similar to this:"
msgstr ""

#: ../../basics.rst:174
msgid "Using ``$ pipenv run`` ensures that your installed packages are available to your script. It's also possible to spawn a new shell that ensures all commands have access to your installed packages with ``$ pipenv shell``."
msgstr ""

#: ../../basics.rst:180
msgid "‚ò§ Next steps"
msgstr ""

#: ../../basics.rst:182
msgid "Congratulations, you now know how to install and use Python packages! ‚ú® üç∞ ‚ú®"
msgstr ""

