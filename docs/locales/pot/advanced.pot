# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project
# This file is distributed under the same license as the pipenv package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pipenv 7.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-09-19 09:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../advanced.rst:4
msgid "Advanced Usage of Pipenv"
msgstr ""

#: ../../advanced.rst:8
msgid "This document covers some of pipenv's more advanced features."
msgstr ""

#: ../../advanced.rst:11
msgid "‚ò§ Example Pipfile & Pipfile.lock"
msgstr ""

#: ../../advanced.rst:15
msgid "Here is a simple example of a ``Pipfile`` and the resulting ``Pipfile.lock``."
msgstr ""

#: ../../advanced.rst:18
msgid "Example Pipfile"
msgstr ""

#: ../../advanced.rst:29
msgid "Example Pipfile.lock"
msgstr ""

#: ../../advanced.rst:110
msgid "‚ò§ Importing from requirements.txt"
msgstr ""

#: ../../advanced.rst:112
msgid "If you only have a ``requirements.txt`` file available when running ``pipenv install``, pipenv will automatically import the contents of this file and create a ``Pipfile`` for you."
msgstr ""

#: ../../advanced.rst:119
msgid "‚ò§ Specifying Versions of a Package"
msgstr ""

#: ../../advanced.rst:121
msgid "To tell pipenv to install a specific version of a library, the usage is simple::"
msgstr ""

#: ../../advanced.rst:125
msgid "This will update your ``Pipfile`` to reflect this requirement, automatically."
msgstr ""

#: ../../advanced.rst:129
msgid "‚ò§ Specifying Versions of Python"
msgstr ""

#: ../../advanced.rst:131
msgid "To create a new virtualenv, using a specific version of Python you have installed (and on your ``PATH``), use the ``--python VERSION`` flag, like so:"
msgstr ""

#: ../../advanced.rst:134
msgid "Use Python 3.6::"
msgstr ""

#: ../../advanced.rst:138
msgid "Use Python 2.7::"
msgstr ""

#: ../../advanced.rst:142
msgid "When given a Python version, like this, Pipenv will automatically scan your system for a Python that matches that given version."
msgstr ""

#: ../../advanced.rst:144
msgid "If a ``Pipfile`` hasn't been created yet, one will be created for you, that looks like this::"
msgstr ""

#: ../../advanced.rst:157
msgid "Note the inclusion of ``[requires] python_version = \"3.6\"``. This specifies that your application requires this version of Python, and will be used automatically when running ``pipenv install`` against this ``Pipfile`` in the future (e.g. on other machines). If this is not true, feel free to simply remove this section."
msgstr ""

#: ../../advanced.rst:161
msgid "If you don't specify a Python version on the command‚Äìline, either the ``[requires]`` ``python_version`` will be selected automatically, or whatever your system's default ``python`` installation is, at time of execution."
msgstr ""

#: ../../advanced.rst:167
msgid "‚ò§ Automatic Python Installation"
msgstr ""

#: ../../advanced.rst:169
msgid "If you have `pyenv <https://github.com/pyenv/pyenv#simple-python-version-management-pyenv>`_ installed and configured, Pipenv will automatically ask you if you want to install a required version of Python if you don't already have it available."
msgstr ""

#: ../../advanced.rst:171
msgid "This is a very fancy feature, and we're very proud of it::"
msgstr ""

#: ../../advanced.rst:202
msgid "üí´‚ú®üç∞‚ú®üí´"
msgstr ""

#: ../../advanced.rst:207
msgid "‚ò§ Fancy Installation of Pipenv"
msgstr ""

#: ../../advanced.rst:209
msgid "To install pipenv in a fancy way, we recommend using `pipsi <https://github.com/mitsuhiko/pipsi>`_."
msgstr ""

#: ../../advanced.rst:211
msgid "Pipsi is a powerful tool which allows you to install Python scripts into isolated virtual environments."
msgstr ""

#: ../../advanced.rst:213
msgid "To install pipsi, first run this::"
msgstr ""

#: ../../advanced.rst:217
msgid "Follow the instructions, you'll have to update your ``PATH``."
msgstr ""

#: ../../advanced.rst:219
msgid "Then, simply run::"
msgstr ""

#: ../../advanced.rst:224
#: ../../advanced.rst:247
msgid "To upgrade pipenv at any time::"
msgstr ""

#: ../../advanced.rst:229
msgid "This will install both ``pipenv`` and ``pew`` (one of our dependencies) in an isolated virtualenv, so it doesn't interfere with the rest of your Python installation!"
msgstr ""

#: ../../advanced.rst:235
msgid "‚ò§ Pragmatic Installation of Pipenv"
msgstr ""

#: ../../advanced.rst:237
msgid "If you have a working installation of pip, and maintain certain \"toolchain\" type Python modules as global utilities in your user enviornment, pip `user installs <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ allow for installation into your home directory. Note that due to interaction between dependencies, you should limit tools installed in this way to basic building blocks for a Python workflow like virtualenv, pipenv, tox, and similar software."
msgstr ""

#: ../../advanced.rst:239
msgid "To install::"
msgstr ""

#: ../../advanced.rst:243
msgid "For more information see the `user installs documentation <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_, but to add the installed cli tools from a pip user install to your path, add the output of::"
msgstr ""

#: ../../advanced.rst:254
msgid "‚ò§ Crude Installation of Pipenv"
msgstr ""

#: ../../advanced.rst:256
msgid "If you don't even have pip installed, you can use this crude installation method, which will boostrap your whole system::"
msgstr ""

#: ../../advanced.rst:260
msgid "Congratulations, you now have pip and Pipenv installed!"
msgstr ""

#: ../../advanced.rst:265
msgid "‚ò§ Environment Management with Pipenv"
msgstr ""

#: ../../advanced.rst:267
msgid "The three primary commands you'll use in managing your pipenv environment are ``$ pipenv install``, ``$ pipenv uninstall``, and ``$ pipenv lock``."
msgstr ""

#: ../../advanced.rst:273
msgid "$ pipenv install"
msgstr ""

#: ../../advanced.rst:275
msgid "``$ pipenv install`` is used for installing packages into the pipenv virtual environment and updating your Pipfile."
msgstr ""

#: ../../advanced.rst:278
msgid "Along with the basic install command, which takes the form::"
msgstr ""

#: ../../advanced.rst:282
msgid "The user can provide these additional parameters:"
msgstr ""

#: ../../advanced.rst:284
msgid "``--two`` ‚Äî Performs the installation in a virtualenv using the system ``python2`` link."
msgstr ""

#: ../../advanced.rst:285
msgid "``--three`` ‚Äî Performs the installation in a virtualenv using the system ``python3`` link."
msgstr ""

#: ../../advanced.rst:286
msgid "``--python`` ‚Äî Performs the installation in a virtualenv using the provided Python intepreter."
msgstr ""

#: ../../advanced.rst:288
msgid "None of the above commands should be used together. They are also **destructive** and will delete your current virtualenv before replacing it with an appropriately versioned one."
msgstr ""

#: ../../advanced.rst:292
msgid "The virtualenv created by Pipenv may be different from what you were expecting. Dangerous characters (i.e. ``$`!*@\"`` as well as space, line feed, carriage return, and tab) are converted to underscores. Additionally, the full path to the current folder is encoded into a \"slug value\" and appended to ensure the virtualenv name is unique."
msgstr ""

#: ../../advanced.rst:298
msgid "``--dev`` ‚Äî Install both ``develop`` and ``default`` packages from ``Pipfile.lock``."
msgstr ""

#: ../../advanced.rst:299
msgid "``--system`` ‚Äî Use the system ``pip`` command rather than the one from your virtualenv."
msgstr ""

#: ../../advanced.rst:300
msgid "``--ignore-pipfile`` ‚Äî Ignore the ``Pipfile`` and install from the ``Pipfile.lock``."
msgstr ""

#: ../../advanced.rst:301
msgid "``--skip-lock`` ‚Äî Ignore the ``Pipfile.ock`` and install from the ``Pipfile``. In addition, do not write out a ``Pipfile.lock`` reflecting changes to the ``Pipfile``."
msgstr ""

#: ../../advanced.rst:306
msgid "$ pipenv uninstall"
msgstr ""

#: ../../advanced.rst:308
msgid "``$ pipenv uninstall`` supports all of the parameters in `pipenv install <#pipenv-install>`_, as well as one additonal, ``--all``."
msgstr ""

#: ../../advanced.rst:313
msgid "``--all`` ‚Äî This parameter will purge all files from the virtual environment,"
msgstr ""

#: ../../advanced.rst:312
msgid "but leave the Pipfile untouched."
msgstr ""

#: ../../advanced.rst:318
msgid "$ pipenv lock"
msgstr ""

#: ../../advanced.rst:320
msgid "``$ pipenv lock`` is used to create a ``Pipfile.lock``, which declares **all** dependencies (and sub-depdendencies) of your project, their latest available versions, and the current hashes for the downloaded files. This ensures repeatable, and most importantly *deterministic*, builds."
msgstr ""

#: ../../advanced.rst:323
msgid "‚ò§ About Shell Configuration"
msgstr ""

#: ../../advanced.rst:325
msgid "Shells are typically misconfigured for subshell use, so ``$ pipenv shell`` may produce unexpected results. If this is the case, try ``$ pipenv shell -c``, which uses \"compatibility mode\", and will attempt to spawn a subshell despite misconfiguration."
msgstr ""

#: ../../advanced.rst:327
msgid "A proper shell configuration only sets environment variables like ``PATH`` during a login session, not during every subshell spawn (as they are typically configured to do). In fish, this looks like this::"
msgstr ""

#: ../../advanced.rst:335
msgid "You should do this for your shell too, in your ``~/.profile`` or ``~/.bashrc`` or wherever appropriate."
msgstr ""

#: ../../advanced.rst:339
msgid "‚ò§ Configuration With Environment Variables"
msgstr ""

#: ../../advanced.rst:341
msgid "``pipenv`` comes with a handful of options that can be enabled via shell environment variables. To activate them, simply create the variable in your shell and pipenv will detect it."
msgstr ""

#: ../../advanced.rst:345
msgid "``PIPENV_SHELL_COMPAT`` ‚Äî Always use compatibility mode when invoking ``pipenv shell``."
msgstr ""

#: ../../advanced.rst:348
msgid "``PIPENV_VENV_IN_PROJECT`` ‚Äî If set, use ``.venv`` in your project directory"
msgstr ""

#: ../../advanced.rst:348
msgid "instead of the global virtualenv manager ``pew``."
msgstr ""

#: ../../advanced.rst:350
msgid "``PIPENV_COLORBLIND`` ‚Äî Disable terminal colors, for some reason."
msgstr ""

#: ../../advanced.rst:352
msgid "``PIPENV_NOSPIN`` ‚Äî Disable terminal spinner, for cleaner logs."
msgstr ""

#: ../../advanced.rst:355
msgid "``PIPENV_MAX_DEPTH`` ‚Äî Set to an integer for the maximum number of directories to resursively"
msgstr ""

#: ../../advanced.rst:355
msgid "search for a Pipfile."
msgstr ""

#: ../../advanced.rst:358
msgid "``PIPENV_TIMEOUT`` ‚Äî Set to an integer for the max number of seconds Pipenv will"
msgstr ""

#: ../../advanced.rst:358
msgid "wait for virtualenv creation to complete.  Defaults to 120 seconds."
msgstr ""

#: ../../advanced.rst:362
msgid "``PIPENV_IGNORE_VIRTUALENVS`` ‚Äî Set to disable automatically using an activated virtualenv over"
msgstr ""

#: ../../advanced.rst:361
msgid "the current project's own virtual environment."
msgstr ""

#: ../../advanced.rst:364
msgid "Also note that `pip itself supports environment variables <https://pip.pypa.io/en/stable/user_guide/#environment-variables>`_, if you need additional customization."
msgstr ""

#: ../../advanced.rst:367
msgid "‚ò§ Custom Virtual Environment Location"
msgstr ""

#: ../../advanced.rst:369
msgid "Pipenv's underlying ``pew`` dependency will automatically honor the ``WORKON_HOME`` environment variable, if you have it set ‚Äî¬†so you can tell pipenv to store your virtual environments wherever you want, e.g.::"
msgstr ""

#: ../../advanced.rst:376
msgid "‚ò§ Testing Projects"
msgstr ""

#: ../../advanced.rst:378
msgid "While pipenv is still a relatively new project, it's already being used in projects like `Requests`_. Specifically for transitioning to the new Pipfile format and running the test suite."
msgstr ""

#: ../../advanced.rst:382
msgid "We've currently tested deployments with both `Travis-CI`_ and `tox`_ with success."
msgstr ""

#: ../../advanced.rst:385
msgid "Travis CI"
msgstr ""

#: ../../advanced.rst:387
msgid "An example Travis CI setup can be found in `Requests`_. The project uses a Makefile to define common functions such as its ``init`` and ``tests`` commands. Here is a stripped down example ``.travis.yml``::"
msgstr ""

#: ../../advanced.rst:408
msgid "and the corresponding Makefile::"
msgstr ""

#: ../../advanced.rst:419
msgid "Tox Automation Project"
msgstr ""

#: ../../advanced.rst:421
msgid "Alternatively, you can configure a ``tox.ini`` like the one below for both local and external testing::"
msgstr ""

#: ../../advanced.rst:443
msgid "With Pipenv's default configuration, you'll need to use tox's ``passenv`` parameter to pass your shell's ``HOME`` variable."
msgstr ""

#: ../../advanced.rst:451
msgid "‚ò§ Pipfile.lock Security Features"
msgstr ""

#: ../../advanced.rst:453
msgid "``Pipfile.lock`` takes advantage of some great new security improvements in ``pip``. By default, the ``Pipfile.lock`` will be generated with the sha256 hashes of each downloaded package. This will allow ``pip`` to guarantee you're installing what you intend to when on a compromised network, or downloading dependencies from an untrusted PyPI endpoint."
msgstr ""

#: ../../advanced.rst:458
msgid "We highly recommend approaching deployments with promoting projects from a development environment into production. You can use ``pipenv lock`` to compile your dependencies on your development environment and deploy the compiled ``Pipfile.lock`` to all of your production environments for reproducible builds."
msgstr ""

#: ../../advanced.rst:470
msgid "‚ò§ Shell Completion"
msgstr ""

#: ../../advanced.rst:472
msgid "Set ``_PIPENV_COMPLETE`` and then source the output of the program. For example, with ``fish``, put this in your ``~/.config/fish/completions/pipenv.fish``::"
msgstr ""

#: ../../advanced.rst:478
msgid "Magic shell completions are now enabled!"
msgstr ""

#: ../../advanced.rst:480
msgid "‚ú®üç∞‚ú®"
msgstr ""

